{"version":3,"file":"electronHttpExecutor.js","sourceRoot":"","sources":["../src/electronHttpExecutor.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,8BAA8B,EAAmB,YAAY,EAAE,MAAM,sBAAsB,CAAA;AACpG,OAAO,EAAE,GAAG,EAAE,MAAM,UAAU,CAAA;AAC9B,OAAO,EAAE,SAAS,EAAE,MAAM,YAAY,CAAA;AAEtC,OAAO,KAAK,IAAI,MAAM,MAAM,CAAA;AAI5B,MAAM,OAAO,oBAAqB,SAAQ,YAAoC;IAC5E,YAA6B,kBAAqE;QAChG,KAAK,EAAE,CAAA;QADoB,uBAAkB,GAAlB,kBAAkB,CAAmD;IAElG,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,GAAW,EAAE,WAAmB,EAAE,OAAwB;QACvE,IAAI,OAAO,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE;YAC/C,MAAM,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAA;SAC3C;QAED,OAAO,MAAM,OAAO,CAAC,iBAAiB,CAAC,aAAa,CAAS,CAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE;YACzF,IAAI,CAAC,UAAU,mBACV,8BAA8B,CAAC,GAAG,EAAE;gBACrC,OAAO,EAAE,OAAO,CAAC,OAAO,IAAI,SAAS;aACtC,CAAC,IACF,QAAQ,EAAE,QAAQ,KACjB,WAAW,EAAE,CAAC,EAAE,OAAO,EAAE,KAAK,CAAC,EAAE;gBAClC,IAAI,KAAK,IAAI,IAAI,EAAE;oBACjB,OAAO,CAAC,WAAW,CAAC,CAAA;iBACrB;qBACI;oBACH,MAAM,CAAC,KAAK,CAAC,CAAA;iBACd;YACH,CAAC,EAAE,QAAQ,CAAC,CAAA;QACd,CAAC,CAAC,CAAA;IACJ,CAAC;IAEM,SAAS,CAAC,OAAY,EAAE,QAAiC;QAC9D,MAAM,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;QACpC,OAAO,CAAC,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAA;QAChC,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAA;QAClC,OAAO,OAAO,CAAA;IAChB,CAAC;IAEO,oBAAoB,CAAC,OAA+B;QAC1D,IAAI,IAAI,CAAC,kBAAkB,IAAI,IAAI,EAAE;YACnC,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAA;SAC7C;IACH,CAAC;IAES,mBAAmB,CAAC,OAAY,EAAE,OAAuB,EAAE,MAA8B,EAAE,aAAqB,EAAE,OAA0C;QACpK,OAAO,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC,UAAkB,EAAE,MAAc,EAAE,WAAmB,EAAE,EAAE;YACjF,IAAI,aAAa,GAAG,EAAE,EAAE;gBACtB,MAAM,CAAC,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC,CAAA;gBAC9C,OAAM;aACP;YAED,OAAO,CAAC,YAAY,CAAC,yBAAyB,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC,CAAA;QACvE,CAAC,CAAC,CAAA;IACJ,CAAC;CACF","sourcesContent":["import { configureRequestOptionsFromUrl, DownloadOptions, HttpExecutor } from \"builder-util-runtime\"\r\nimport { net } from \"electron\"\r\nimport { ensureDir } from \"fs-extra-p\"\r\nimport { RequestOptions } from \"http\"\r\nimport * as path from \"path\"\r\n\r\nexport type LoginCallback = (username: string, password: string) => void\r\n\r\nexport class ElectronHttpExecutor extends HttpExecutor<Electron.ClientRequest> {\r\n  constructor(private readonly proxyLoginCallback?: (authInfo: any, callback: LoginCallback) => void) {\r\n    super()\r\n  }\r\n\r\n  async download(url: string, destination: string, options: DownloadOptions): Promise<string> {\r\n    if (options == null || !options.skipDirCreation) {\r\n      await ensureDir(path.dirname(destination))\r\n    }\r\n\r\n    return await options.cancellationToken.createPromise<string>((resolve, reject, onCancel) => {\r\n      this.doDownload({\r\n        ...configureRequestOptionsFromUrl(url, {\r\n          headers: options.headers || undefined,\r\n        }),\r\n        redirect: \"manual\",\r\n      }, destination, 0, options, error => {\r\n        if (error == null) {\r\n          resolve(destination)\r\n        }\r\n        else {\r\n          reject(error)\r\n        }\r\n      }, onCancel)\r\n    })\r\n  }\r\n\r\n  public doRequest(options: any, callback: (response: any) => void): any {\r\n    const request = net.request(options)\r\n    request.on(\"response\", callback)\r\n    this.addProxyLoginHandler(request)\r\n    return request\r\n  }\r\n\r\n  private addProxyLoginHandler(request: Electron.ClientRequest) {\r\n    if (this.proxyLoginCallback != null) {\r\n      request.on(\"login\", this.proxyLoginCallback)\r\n    }\r\n  }\r\n\r\n  protected addRedirectHandlers(request: any, options: RequestOptions, reject: (error: Error) => void, redirectCount: number, handler: (options: RequestOptions) => void) {\r\n    request.on(\"redirect\", (statusCode: number, method: string, redirectUrl: string) => {\r\n      if (redirectCount > 10) {\r\n        reject(new Error(\"Too many redirects (> 10)\"))\r\n        return\r\n      }\r\n\r\n      handler(HttpExecutor.prepareRedirectUrlOptions(redirectUrl, options))\r\n    })\r\n  }\r\n}"]}