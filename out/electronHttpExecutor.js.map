{"version":3,"sources":["../src/electronHttpExecutor.ts"],"names":[],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;;;;AAIM,MAAO,oBAAP,SAAoC,kCAApC,CAAwE;AAC5E,EAAA,WAAA,CAA6B,kBAA7B,EAAkG;AAChG;AAD2B,SAAA,kBAAA,GAAA,kBAAA;AAE5B;;AAED,QAAM,QAAN,CAAe,GAAf,EAA4B,WAA5B,EAAiD,OAAjD,EAAyE;AACvE,QAAI,OAAO,IAAI,IAAX,IAAmB,CAAC,OAAO,CAAC,eAAhC,EAAiD;AAC/C,YAAM,2BAAU,IAAI,CAAC,OAAL,CAAa,WAAb,CAAV,CAAN;AACD;;AAED,WAAO,MAAM,OAAO,CAAC,iBAAR,CAA0B,aAA1B,CAAgD,CAAC,OAAD,EAAU,MAAV,EAAkB,QAAlB,KAA8B;AACzF,WAAK,UAAL,CAAe,MAAA,CAAA,MAAA,CAAA,EAAA,EACV,0DAA+B,GAA/B,EAAoC;AACrC,QAAA,OAAO,EAAE,OAAO,CAAC,OAAR,IAAmB;AADS,OAApC,CADU,EAGX;AACF,QAAA,QAAQ,EAAE;AADR,OAHW,CAAf,EAKG,WALH,EAKgB,CALhB,EAKmB,OALnB,EAK4B,KAAK,IAAG;AAClC,YAAI,KAAK,IAAI,IAAb,EAAmB;AACjB,UAAA,OAAO,CAAC,WAAD,CAAP;AACD,SAFD,MAGK;AACH,UAAA,MAAM,CAAC,KAAD,CAAN;AACD;AACF,OAZD,EAYG,QAZH;AAaD,KAdY,CAAb;AAeD;;AAEM,EAAA,SAAS,CAAC,OAAD,EAAe,QAAf,EAAgD;AAC9D,UAAM,OAAO,GAAG,gBAAI,OAAJ,CAAY,OAAZ,CAAhB;;AACA,IAAA,OAAO,CAAC,EAAR,CAAW,UAAX,EAAuB,QAAvB;AACA,SAAK,oBAAL,CAA0B,OAA1B;AACA,WAAO,OAAP;AACD;;AAEO,EAAA,oBAAoB,CAAC,OAAD,EAAgC;AAC1D,QAAI,KAAK,kBAAL,IAA2B,IAA/B,EAAqC;AACnC,MAAA,OAAO,CAAC,EAAR,CAAW,OAAX,EAAoB,KAAK,kBAAzB;AACD;AACF;;AAES,EAAA,mBAAmB,CAAC,OAAD,EAAe,OAAf,EAAwC,MAAxC,EAAwE,aAAxE,EAA+F,OAA/F,EAAyI;AACpK,IAAA,OAAO,CAAC,EAAR,CAAW,UAAX,EAAuB,CAAC,UAAD,EAAqB,MAArB,EAAqC,WAArC,KAA4D;AACjF,UAAI,aAAa,GAAG,EAApB,EAAwB;AACtB,QAAA,MAAM,CAAC,IAAI,KAAJ,CAAU,2BAAV,CAAD,CAAN;AACA;AACD;;AAED,MAAA,OAAO,CAAC,mCAAa,yBAAb,CAAuC,WAAvC,EAAoD,OAApD,CAAD,CAAP;AACD,KAPD;AAQD;;AAjD2E,C","sourcesContent":["import { configureRequestOptionsFromUrl, DownloadOptions, HttpExecutor } from \"builder-util-runtime\"\r\nimport { net } from \"electron\"\r\nimport { ensureDir } from \"fs-extra-p\"\r\nimport { RequestOptions } from \"http\"\r\nimport * as path from \"path\"\r\n\r\nexport type LoginCallback = (username: string, password: string) => void\r\n\r\nexport class ElectronHttpExecutor extends HttpExecutor<Electron.ClientRequest> {\r\n  constructor(private readonly proxyLoginCallback?: (authInfo: any, callback: LoginCallback) => void) {\r\n    super()\r\n  }\r\n\r\n  async download(url: string, destination: string, options: DownloadOptions): Promise<string> {\r\n    if (options == null || !options.skipDirCreation) {\r\n      await ensureDir(path.dirname(destination))\r\n    }\r\n\r\n    return await options.cancellationToken.createPromise<string>((resolve, reject, onCancel) => {\r\n      this.doDownload({\r\n        ...configureRequestOptionsFromUrl(url, {\r\n          headers: options.headers || undefined,\r\n        }),\r\n        redirect: \"manual\",\r\n      }, destination, 0, options, error => {\r\n        if (error == null) {\r\n          resolve(destination)\r\n        }\r\n        else {\r\n          reject(error)\r\n        }\r\n      }, onCancel)\r\n    })\r\n  }\r\n\r\n  public doRequest(options: any, callback: (response: any) => void): any {\r\n    const request = net.request(options)\r\n    request.on(\"response\", callback)\r\n    this.addProxyLoginHandler(request)\r\n    return request\r\n  }\r\n\r\n  private addProxyLoginHandler(request: Electron.ClientRequest) {\r\n    if (this.proxyLoginCallback != null) {\r\n      request.on(\"login\", this.proxyLoginCallback)\r\n    }\r\n  }\r\n\r\n  protected addRedirectHandlers(request: any, options: RequestOptions, reject: (error: Error) => void, redirectCount: number, handler: (options: RequestOptions) => void) {\r\n    request.on(\"redirect\", (statusCode: number, method: string, redirectUrl: string) => {\r\n      if (redirectCount > 10) {\r\n        reject(new Error(\"Too many redirects (> 10)\"))\r\n        return\r\n      }\r\n\r\n      handler(HttpExecutor.prepareRedirectUrlOptions(redirectUrl, options))\r\n    })\r\n  }\r\n}"],"sourceRoot":""}
