{"version":3,"file":"multipleRangeDownloader.js","sourceRoot":"","sources":["../../src/differentialDownloader/multipleRangeDownloader.ts"],"names":[],"mappings":"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","sourcesContent":["import { createHttpError, safeGetHeader } from \"builder-util-runtime\"\r\nimport { IncomingMessage } from \"http\"\r\nimport { Writable } from \"stream\"\r\nimport { copyData, DataSplitter, PartListDataTask } from \"./DataSplitter\"\r\nimport { DifferentialDownloader } from \"./DifferentialDownloader\"\r\nimport { Operation, OperationKind } from \"./downloadPlanBuilder\"\r\n\r\nexport function executeTasks(differentialDownloader: DifferentialDownloader, tasks: Array<Operation>, out: Writable, oldFileFd: number, reject: (error: Error) => void) {\r\n  const w = (taskOffset: number) => {\r\n    if (taskOffset >= tasks.length) {\r\n      if (differentialDownloader.fileMetadataBuffer != null) {\r\n        out.write(differentialDownloader.fileMetadataBuffer)\r\n      }\r\n      out.end()\r\n      return\r\n    }\r\n\r\n    const nextOffset = taskOffset + (differentialDownloader.options.useMultipleRangeRequest === false ? 1 : 1000)\r\n    _executeTasks(differentialDownloader, {\r\n      tasks,\r\n      start: taskOffset,\r\n      end: Math.min(tasks.length, nextOffset),\r\n      oldFileFd,\r\n    }, out, () => w(nextOffset), reject)\r\n  }\r\n  return w\r\n}\r\n\r\nexport function _executeTasks(differentialDownloader: DifferentialDownloader, options: PartListDataTask, out: Writable, resolve: () => void, reject: (error: Error) => void) {\r\n  let ranges = \"bytes=\"\r\n  let partCount = 0\r\n  const partIndexToTaskIndex = new Map<number, number>()\r\n  const partIndexToLength: Array<number> = []\r\n  for (let i = options.start; i < options.end; i++) {\r\n    const task = options.tasks[i]\r\n    if (task.kind === OperationKind.DOWNLOAD) {\r\n      ranges += `${task.start}-${task.end - 1}, `\r\n      partIndexToTaskIndex.set(partCount, i)\r\n      partCount++\r\n      partIndexToLength.push(task.end - task.start)\r\n    }\r\n  }\r\n\r\n  if (partCount <= 1) {\r\n    // the only remote range - copy\r\n    const w = (index: number) => {\r\n      if (index >= options.end) {\r\n        resolve()\r\n        return\r\n      }\r\n\r\n      const task = options.tasks[index++]\r\n\r\n      if (task.kind === OperationKind.COPY) {\r\n        copyData(task, out, options.oldFileFd, reject, () => w(index))\r\n      }\r\n      else {\r\n        const requestOptions = differentialDownloader.createRequestOptions(\"get\")\r\n        requestOptions.headers!!.Range = `bytes=${task.start}-${task.end - 1}`\r\n        const request = differentialDownloader.httpExecutor.doRequest(requestOptions, response => {\r\n          if (!checkIsRangesSupported(response, reject)) {\r\n            return\r\n          }\r\n\r\n          response.pipe(out, {\r\n            end: false\r\n          })\r\n          response.once(\"end\", () => w(index))\r\n        })\r\n        differentialDownloader.httpExecutor.addErrorAndTimeoutHandlers(request, reject)\r\n        request.end()\r\n      }\r\n    }\r\n\r\n    w(options.start)\r\n    return\r\n  }\r\n\r\n  const requestOptions = differentialDownloader.createRequestOptions(\"get\")\r\n  requestOptions.headers!!.Range = ranges.substring(0, ranges.length - 2)\r\n  const request = differentialDownloader.httpExecutor.doRequest(requestOptions, response => {\r\n    if (!checkIsRangesSupported(response, reject)) {\r\n      return\r\n    }\r\n\r\n    const contentType = safeGetHeader(response, \"content-type\")\r\n    const m = /^multipart\\/.+?(?:; boundary=(?:(?:\"(.+)\")|(?:([^\\s]+))))$/i.exec(contentType)\r\n    if (m == null) {\r\n      reject(new Error(`Content-Type \"multipart/byteranges\" is expected, but got \"${contentType}\"`))\r\n      return\r\n    }\r\n\r\n    const dicer = new DataSplitter(out, options, partIndexToTaskIndex, m[1] || m[2], partIndexToLength, resolve)\r\n    dicer.on(\"error\", reject)\r\n    response.pipe(dicer)\r\n  })\r\n  differentialDownloader.httpExecutor.addErrorAndTimeoutHandlers(request, reject)\r\n  request.end()\r\n}\r\n\r\nexport function checkIsRangesSupported(response: IncomingMessage, reject: (error: Error) => void): boolean {\r\n  // Electron net handles redirects automatically, our NodeJS test server doesn't use redirects - so, we don't check 3xx codes.\r\n  if (response.statusCode!! >= 400) {\r\n    reject(createHttpError(response))\r\n    return false\r\n  }\r\n\r\n  if (response.statusCode !== 206) {\r\n    const acceptRanges = safeGetHeader(response, \"accept-ranges\")\r\n    if (acceptRanges == null || acceptRanges === \"none\") {\r\n      reject(new Error(`Server doesn't support Accept-Ranges (response code ${response.statusCode})`))\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}"]}