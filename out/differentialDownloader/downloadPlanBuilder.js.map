{"version":3,"file":"downloadPlanBuilder.js","sourceRoot":"","sources":["../../src/differentialDownloader/downloadPlanBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import { BlockMap, BlockMapFile } from \"builder-util-runtime/out/blockMapApi\"\r\nimport { Logger } from \"../main\"\r\n\r\nexport enum OperationKind {\r\n  COPY, DOWNLOAD\r\n}\r\n\r\nexport interface Operation {\r\n  kind: OperationKind\r\n\r\n  start: number\r\n  end: number\r\n}\r\n\r\nexport function computeOperations(oldBlockMap: BlockMap, newBlockMap: BlockMap, logger: Logger) {\r\n  const nameToOldBlocks = buildBlockFileMap(oldBlockMap.files)\r\n  const nameToNewBlocks = buildBlockFileMap(newBlockMap.files)\r\n\r\n  const oldEntryMap = buildEntryMap(oldBlockMap.files)\r\n\r\n  let lastOperation: Operation | null = null\r\n\r\n  const operations: Array<Operation> = []\r\n  for (const blockMapFile of newBlockMap.files) {\r\n    const name = blockMapFile.name\r\n    const oldEntry = oldEntryMap.get(name)\r\n    if (oldEntry == null) {\r\n      // new file\r\n      operations.push({\r\n        kind: OperationKind.DOWNLOAD,\r\n        start: blockMapFile.offset,\r\n        end: blockMapFile.offset + blockMapFile.sizes.reduce((accumulator, currentValue) => accumulator + currentValue),\r\n      })\r\n      continue\r\n    }\r\n\r\n    const newFile = nameToNewBlocks.get(name)!!\r\n    let changedBlockCount = 0\r\n\r\n    const {checksumToOffset: checksumToOldOffset, checksumToOldSize} = buildChecksumMap(nameToOldBlocks.get(name)!!, oldEntry.offset)\r\n\r\n    let newOffset = blockMapFile.offset\r\n    for (let i = 0; i < newFile.checksums.length; newOffset += newFile.sizes[i], i++) {\r\n      const blockSize = newFile.sizes[i]\r\n      const checksum = newFile.checksums[i]\r\n      let oldOffset: number | null | undefined = checksumToOldOffset.get(checksum)\r\n      if (oldOffset != null && checksumToOldSize.get(checksum) !== blockSize) {\r\n        logger.warn(`Checksum (\"${checksum}\") matches, but size differs (old: ${checksumToOldSize.get(checksum)}, new: ${blockSize})`)\r\n        oldOffset = null\r\n      }\r\n\r\n      if (oldOffset == null) {\r\n        changedBlockCount++\r\n\r\n        if (lastOperation == null || lastOperation.kind !== OperationKind.DOWNLOAD || lastOperation.end !== newOffset) {\r\n          lastOperation = {\r\n            kind: OperationKind.DOWNLOAD,\r\n            start: newOffset,\r\n            end: newOffset + blockSize,\r\n          }\r\n          operations.push(lastOperation)\r\n        }\r\n        else {\r\n          lastOperation.end += blockSize\r\n        }\r\n      }\r\n      else if (lastOperation == null || lastOperation.kind !== OperationKind.COPY || lastOperation.end !== oldOffset) {\r\n        lastOperation = {\r\n          kind: OperationKind.COPY,\r\n          start: oldOffset,\r\n          end: oldOffset + blockSize,\r\n        }\r\n        operations.push(lastOperation)\r\n      }\r\n      else {\r\n        lastOperation.end += blockSize\r\n      }\r\n    }\r\n\r\n    if (changedBlockCount > 0) {\r\n      logger.info(`File${blockMapFile.name === \"file\" ? \"\" : (\" \" + blockMapFile.name)} has ${changedBlockCount} changed blocks`)\r\n    }\r\n  }\r\n  return operations\r\n}\r\n\r\nfunction buildChecksumMap(file: BlockMapFile, fileOffset: number) {\r\n  const checksumToOffset = new Map<string, number>()\r\n  const checksumToSize = new Map<string, number>()\r\n  let offset = fileOffset\r\n  for (let i = 0; i < file.checksums.length; i++) {\r\n    const checksum = file.checksums[i]\r\n    const size = file.sizes[i]\r\n    checksumToOffset.set(checksum, offset)\r\n    checksumToSize.set(checksum, size)\r\n    offset += size\r\n  }\r\n  return {checksumToOffset, checksumToOldSize: checksumToSize}\r\n}\r\n\r\nfunction buildEntryMap(list: Array<BlockMapFile>) {\r\n  const result = new Map<string, BlockMapFile>()\r\n  for (const item of list) {\r\n    result.set(item.name, item)\r\n  }\r\n  return result\r\n}\r\n\r\nfunction buildBlockFileMap(list: Array<BlockMapFile>) {\r\n  const result = new Map<string, BlockMapFile>()\r\n  for (const item of list) {\r\n    result.set(item.name, item)\r\n  }\r\n  return result\r\n}"]}