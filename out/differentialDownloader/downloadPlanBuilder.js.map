{"version":3,"sources":["../../src/differentialDownloader/downloadPlanBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import { BlockMap, BlockMapFile } from \"builder-util-runtime/out/blockMapApi\"\r\nimport { Logger } from \"../main\"\r\n\r\nexport enum OperationKind {\r\n  COPY, DOWNLOAD\r\n}\r\n\r\nexport interface Operation {\r\n  kind: OperationKind\r\n\r\n  start: number\r\n  end: number\r\n}\r\n\r\nexport function computeOperations(oldBlockMap: BlockMap, newBlockMap: BlockMap, logger: Logger) {\r\n  const nameToOldBlocks = buildBlockFileMap(oldBlockMap.files)\r\n  const nameToNewBlocks = buildBlockFileMap(newBlockMap.files)\r\n\r\n  const oldEntryMap = buildEntryMap(oldBlockMap.files)\r\n\r\n  let lastOperation: Operation | null = null\r\n\r\n  const operations: Array<Operation> = []\r\n  for (const blockMapFile of newBlockMap.files) {\r\n    const name = blockMapFile.name\r\n    const oldEntry = oldEntryMap.get(name)\r\n    if (oldEntry == null) {\r\n      // new file\r\n      operations.push({\r\n        kind: OperationKind.DOWNLOAD,\r\n        start: blockMapFile.offset,\r\n        end: blockMapFile.offset + blockMapFile.sizes.reduce((accumulator, currentValue) => accumulator + currentValue),\r\n      })\r\n      continue\r\n    }\r\n\r\n    const newFile = nameToNewBlocks.get(name)!!\r\n    let changedBlockCount = 0\r\n\r\n    const {checksumToOffset: checksumToOldOffset, checksumToOldSize} = buildChecksumMap(nameToOldBlocks.get(name)!!, oldEntry.offset)\r\n\r\n    let newOffset = blockMapFile.offset\r\n    for (let i = 0; i < newFile.checksums.length; newOffset += newFile.sizes[i], i++) {\r\n      const blockSize = newFile.sizes[i]\r\n      const checksum = newFile.checksums[i]\r\n      let oldOffset: number | null | undefined = checksumToOldOffset.get(checksum)\r\n      if (oldOffset != null && checksumToOldSize.get(checksum) !== blockSize) {\r\n        logger.warn(`Checksum (\"${checksum}\") matches, but size differs (old: ${checksumToOldSize.get(checksum)}, new: ${blockSize})`)\r\n        oldOffset = null\r\n      }\r\n\r\n      if (oldOffset == null) {\r\n        changedBlockCount++\r\n\r\n        if (lastOperation == null || lastOperation.kind !== OperationKind.DOWNLOAD || lastOperation.end !== newOffset) {\r\n          lastOperation = {\r\n            kind: OperationKind.DOWNLOAD,\r\n            start: newOffset,\r\n            end: newOffset + blockSize,\r\n          }\r\n          operations.push(lastOperation)\r\n        }\r\n        else {\r\n          lastOperation.end += blockSize\r\n        }\r\n      }\r\n      else if (lastOperation == null || lastOperation.kind !== OperationKind.COPY || lastOperation.end !== oldOffset) {\r\n        lastOperation = {\r\n          kind: OperationKind.COPY,\r\n          start: oldOffset,\r\n          end: oldOffset + blockSize,\r\n        }\r\n        operations.push(lastOperation)\r\n      }\r\n      else {\r\n        lastOperation.end += blockSize\r\n      }\r\n    }\r\n\r\n    if (changedBlockCount > 0) {\r\n      logger.info(`File${blockMapFile.name === \"file\" ? \"\" : (\" \" + blockMapFile.name)} has ${changedBlockCount} changed blocks`)\r\n    }\r\n  }\r\n  return operations\r\n}\r\n\r\nfunction buildChecksumMap(file: BlockMapFile, fileOffset: number) {\r\n  const checksumToOffset = new Map<string, number>()\r\n  const checksumToSize = new Map<string, number>()\r\n  let offset = fileOffset\r\n  for (let i = 0; i < file.checksums.length; i++) {\r\n    const checksum = file.checksums[i]\r\n    const size = file.sizes[i]\r\n    checksumToOffset.set(checksum, offset)\r\n    checksumToSize.set(checksum, size)\r\n    offset += size\r\n  }\r\n  return {checksumToOffset, checksumToOldSize: checksumToSize}\r\n}\r\n\r\nfunction buildEntryMap(list: Array<BlockMapFile>) {\r\n  const result = new Map<string, BlockMapFile>()\r\n  for (const item of list) {\r\n    result.set(item.name, item)\r\n  }\r\n  return result\r\n}\r\n\r\nfunction buildBlockFileMap(list: Array<BlockMapFile>) {\r\n  const result = new Map<string, BlockMapFile>()\r\n  for (const item of list) {\r\n    result.set(item.name, item)\r\n  }\r\n  return result\r\n}"],"sourceRoot":""}
