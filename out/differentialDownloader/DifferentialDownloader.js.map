{"version":3,"file":"DifferentialDownloader.js","sourceRoot":"","sources":["../../src/differentialDownloader/DifferentialDownloader.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\r\nimport { BlockMapDataHolder, configureRequestOptionsFromUrl, createHttpError, DigestTransform, HttpExecutor } from \"builder-util-runtime\"\r\nimport { BlockMap } from \"builder-util-runtime/out/blockMapApi\"\r\nimport { close, createWriteStream, open } from \"fs-extra-p\"\r\nimport { OutgoingHttpHeaders, RequestOptions } from \"http\"\r\nimport { Logger } from \"../main\"\r\nimport { copyData } from \"./DataSplitter\"\r\nimport { computeOperations, Operation, OperationKind } from \"./downloadPlanBuilder\"\r\nimport { checkIsRangesSupported, executeTasks } from \"./multipleRangeDownloader\"\r\n\r\nconst inflateRaw: any = BluebirdPromise.promisify(require(\"zlib\").inflateRaw)\r\n\r\nexport interface DifferentialDownloaderOptions {\r\n  readonly oldFile: string\r\n  readonly newUrl: string\r\n  readonly logger: Logger\r\n  readonly newFile: string\r\n\r\n  readonly requestHeaders: OutgoingHttpHeaders | null\r\n\r\n  readonly useMultipleRangeRequest?: boolean\r\n}\r\n\r\nexport abstract class DifferentialDownloader {\r\n  private readonly baseRequestOptions: RequestOptions\r\n\r\n  fileMetadataBuffer: Buffer | null = null\r\n\r\n  private readonly logger: Logger\r\n\r\n  // noinspection TypeScriptAbstractClassConstructorCanBeMadeProtected\r\n  constructor(protected readonly blockAwareFileInfo: BlockMapDataHolder, readonly httpExecutor: HttpExecutor<any>, readonly options: DifferentialDownloaderOptions) {\r\n    this.logger = options.logger\r\n    this.baseRequestOptions = configureRequestOptionsFromUrl(options.newUrl, {})\r\n  }\r\n\r\n  createRequestOptions(method: \"head\" | \"get\" = \"get\", newUrl?: string | null): RequestOptions {\r\n    return {\r\n      ...(newUrl == null ? this.baseRequestOptions : configureRequestOptionsFromUrl(newUrl, {})),\r\n      method,\r\n      headers: {\r\n        ...this.options.requestHeaders,\r\n        accept: \"*/*\",\r\n      } as any,\r\n    }\r\n  }\r\n\r\n  protected doDownload(oldBlockMap: BlockMap, newBlockMap: BlockMap): Promise<any> {\r\n    // we don't check other metadata like compressionMethod - generic check that it is make sense to differentially update is suitable for it\r\n    if (oldBlockMap.version !== newBlockMap.version) {\r\n      throw new Error(`version is different (${oldBlockMap.version} - ${newBlockMap.version}), full download is required`)\r\n    }\r\n\r\n    const logger = this.logger\r\n    const operations = computeOperations(oldBlockMap, newBlockMap, logger)\r\n    if (logger.debug != null) {\r\n      logger.debug(JSON.stringify(operations, null, 2))\r\n    }\r\n\r\n    let downloadSize = 0\r\n    let copySize = 0\r\n    for (const operation of operations) {\r\n      const length = operation.end - operation.start\r\n      if (operation.kind === OperationKind.DOWNLOAD) {\r\n        downloadSize += length\r\n      }\r\n      else {\r\n        copySize += length\r\n      }\r\n    }\r\n\r\n    const newPackageSize = this.blockAwareFileInfo.size\r\n    if ((downloadSize + copySize + (this.fileMetadataBuffer == null ? 0 : this.fileMetadataBuffer.length)) !== newPackageSize) {\r\n      throw new Error(`Internal error, size mismatch: downloadSize: ${downloadSize}, copySize: ${copySize}, newPackageSize: ${newPackageSize}`)\r\n    }\r\n\r\n    logger.info(`Full: ${formatBytes(newPackageSize)}, To download: ${formatBytes(downloadSize)} (${Math.round(downloadSize / (newPackageSize / 100))}%)`)\r\n\r\n    return this.downloadFile(operations)\r\n  }\r\n\r\n  private downloadFile(tasks: Array<Operation>): Promise<any> {\r\n    const fdList: Array<OpenedFile> = []\r\n    const closeFiles = () => {\r\n      return BluebirdPromise.map(fdList, openedFile => {\r\n        return close(openedFile.descriptor)\r\n          .catch(e => {\r\n            this.logger.error(`cannot close file \"${openedFile.path}\": ${e}`)\r\n          })\r\n      })\r\n    }\r\n    return this.doDownloadFile(tasks, fdList)\r\n      .then(closeFiles)\r\n      .catch(e => {\r\n        // then must be after catch here (since then always throws error)\r\n        return closeFiles()\r\n          .catch(closeFilesError => {\r\n            // closeFiles never throw error, but just to be sure\r\n            try {\r\n              this.logger.error(`cannot close files: ${closeFilesError}`)\r\n            }\r\n            catch (errorOnLog) {\r\n              try {\r\n                console.error(errorOnLog)\r\n              }\r\n              catch (ignored) {\r\n                // ok, give up and ignore error\r\n              }\r\n            }\r\n            throw e\r\n          })\r\n          .then(() => {\r\n            throw e\r\n          })\r\n      })\r\n  }\r\n\r\n  private async doDownloadFile(tasks: Array<Operation>, fdList: Array<OpenedFile>): Promise<any> {\r\n    const oldFileFd = await open(this.options.oldFile, \"r\")\r\n    fdList.push({descriptor: oldFileFd, path: this.options.oldFile})\r\n    const newFileFd = await open(this.options.newFile, \"w\")\r\n    fdList.push({descriptor: newFileFd, path: this.options.newFile})\r\n    const fileOut = createWriteStream(this.options.newFile, {fd: newFileFd})\r\n    await new Promise((resolve, reject) => {\r\n      const streams: Array<any> = []\r\n      const digestTransform = new DigestTransform(this.blockAwareFileInfo.sha512)\r\n      // to simply debug, do manual validation to allow file to be fully written\r\n      digestTransform.isValidateOnEnd = false\r\n      streams.push(digestTransform)\r\n\r\n      // noinspection JSArrowFunctionCanBeReplacedWithShorthand\r\n      fileOut.on(\"finish\", () => {\r\n        (fileOut.close as any)(() => {\r\n          try {\r\n            digestTransform.validate()\r\n          }\r\n          catch (e) {\r\n            reject(e)\r\n            return\r\n          }\r\n\r\n          resolve()\r\n        })\r\n      })\r\n\r\n      streams.push(fileOut)\r\n\r\n      let lastStream = null\r\n      for (const stream of streams) {\r\n        stream.on(\"error\", reject)\r\n        if (lastStream == null) {\r\n          lastStream = stream\r\n        }\r\n        else {\r\n          lastStream = lastStream.pipe(stream)\r\n        }\r\n      }\r\n\r\n      const firstStream = streams[0]\r\n\r\n      let w: any\r\n      if (this.options.useMultipleRangeRequest) {\r\n        w = executeTasks(this, tasks, firstStream, oldFileFd, reject)\r\n      }\r\n      else {\r\n        let attemptCount = 0\r\n        let actualUrl: string | null = null\r\n        this.logger.info(`Differential download: ${this.options.newUrl}`)\r\n        w = (index: number) => {\r\n          if (index >= tasks.length) {\r\n            if (this.fileMetadataBuffer != null) {\r\n              firstStream.write(this.fileMetadataBuffer)\r\n            }\r\n            firstStream.end()\r\n            return\r\n          }\r\n\r\n          const operation = tasks[index++]\r\n          if (operation.kind === OperationKind.COPY) {\r\n            copyData(operation, firstStream, oldFileFd, reject, () => w(index))\r\n          }\r\n          else {\r\n            const requestOptions = this.createRequestOptions(\"get\", actualUrl)\r\n            const range = `bytes=${operation.start}-${operation.end - 1}`\r\n            requestOptions.headers!!.Range = range;\r\n            (requestOptions as any).redirect = \"manual\"\r\n\r\n            const debug = this.logger.debug\r\n            if (debug != null) {\r\n              debug(`effective url: ${actualUrl == null ? \"original\" : removeQuery(actualUrl)}, range: ${range}`)\r\n            }\r\n\r\n            const request = this.httpExecutor.doRequest(requestOptions, response => {\r\n              // Electron net handles redirects automatically, our NodeJS test server doesn't use redirects - so, we don't check 3xx codes.\r\n              if (response.statusCode >= 400) {\r\n                reject(createHttpError(response))\r\n              }\r\n\r\n              response.pipe(firstStream, {\r\n                end: false\r\n              })\r\n              response.once(\"end\", () => {\r\n                if (++attemptCount === 100) {\r\n                  attemptCount = 0\r\n                  setTimeout(() => w(index), 1000)\r\n                }\r\n                else {\r\n                  w(index)\r\n                }\r\n              })\r\n            })\r\n            request.on(\"redirect\", (statusCode: number, method: string, redirectUrl: string) => {\r\n              this.logger.info(`Redirect to ${removeQuery(redirectUrl)}`)\r\n              actualUrl = redirectUrl\r\n              request.followRedirect()\r\n            })\r\n            this.httpExecutor.addErrorAndTimeoutHandlers(request, reject)\r\n            request.end()\r\n          }\r\n        }\r\n      }\r\n\r\n      w(0)\r\n    })\r\n  }\r\n\r\n  protected async readRemoteBytes(start: number, endInclusive: number) {\r\n    const buffer = Buffer.allocUnsafe((endInclusive + 1) - start)\r\n    const requestOptions = this.createRequestOptions()\r\n    requestOptions.headers!!.Range = `bytes=${start}-${endInclusive}`\r\n    let position = 0\r\n    await this.request(requestOptions, chunk => {\r\n      chunk.copy(buffer, position)\r\n      position += chunk.length\r\n    })\r\n    return buffer\r\n  }\r\n\r\n  private request(requestOptions: RequestOptions, dataHandler: (chunk: Buffer) => void) {\r\n    return new Promise((resolve, reject) => {\r\n      const request = this.httpExecutor.doRequest(requestOptions, response => {\r\n        if (!checkIsRangesSupported(response, reject)) {\r\n          return\r\n        }\r\n\r\n        response.on(\"data\", dataHandler)\r\n        response.on(\"end\", () => resolve())\r\n      })\r\n      this.httpExecutor.addErrorAndTimeoutHandlers(request, reject)\r\n      request.end()\r\n    })\r\n  }\r\n}\r\n\r\nexport async function readBlockMap(data: Buffer): Promise<BlockMap> {\r\n  return JSON.parse((await inflateRaw(data)).toString())\r\n}\r\n\r\nfunction formatBytes(value: number, symbol = \" KB\") {\r\n  return new Intl.NumberFormat(\"en\").format((value / 1024).toFixed(2) as any) + symbol\r\n}\r\n\r\n// safety\r\nfunction removeQuery(url: string) {\r\n  const index = url.indexOf(\"?\")\r\n  return index < 0 ? url : url.substring(0, index)\r\n}\r\n\r\ninterface OpenedFile {\r\n  readonly descriptor: number\r\n  readonly path: string\r\n}"]}