{"version":3,"sources":["../../src/differentialDownloader/FileWithEmbeddedBlockMapDifferentialDownloader.ts"],"names":[],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEM,MAAO,8CAAP,SAA8D,gDAA9D,CAAoF;AACxF,QAAM,QAAN,GAAc;AACZ,UAAM,WAAW,GAAG,KAAK,kBAAzB;AACA,UAAM,QAAQ,GAAG,WAAW,CAAC,IAA7B;AACA,UAAM,MAAM,GAAG,QAAQ,IAAI,WAAW,CAAC,YAAZ,GAA6B,CAAjC,CAAvB;AACA,SAAK,kBAAL,GAA0B,MAAM,KAAK,eAAL,CAAqB,MAArB,EAA6B,QAAQ,GAAG,CAAxC,CAAhC;AACA,UAAM,WAAW,GAAG,MAAM,4CAAa,KAAK,kBAAL,CAAwB,KAAxB,CAA8B,CAA9B,EAAiC,KAAK,kBAAL,CAAwB,MAAxB,GAAiC,CAAlE,CAAb,CAA1B;AACA,UAAM,KAAK,UAAL,CAAgB,IAAI,CAAC,KAAL,EAAW,MAAM,6CAAyB,KAAK,OAAL,CAAa,OAAtC,CAAjB,EAAhB,EAAkF,WAAlF,CAAN;AACD;;AARuF,C","sourcesContent":["import { readEmbeddedBlockMapData } from \"builder-util-runtime/out/blockMapApi\"\r\nimport { DifferentialDownloader, readBlockMap } from \"./DifferentialDownloader\"\r\n\r\nexport class FileWithEmbeddedBlockMapDifferentialDownloader extends DifferentialDownloader {\r\n  async download() {\r\n    const packageInfo = this.blockAwareFileInfo\r\n    const fileSize = packageInfo.size!!\r\n    const offset = fileSize - (packageInfo.blockMapSize!! + 4)\r\n    this.fileMetadataBuffer = await this.readRemoteBytes(offset, fileSize - 1)\r\n    const newBlockMap = await readBlockMap(this.fileMetadataBuffer.slice(0, this.fileMetadataBuffer.length - 4))\r\n    await this.doDownload(JSON.parse(await readEmbeddedBlockMapData(this.options.oldFile)), newBlockMap)\r\n  }\r\n}"],"sourceRoot":""}
