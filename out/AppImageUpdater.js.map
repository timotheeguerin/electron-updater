{"version":3,"sources":["../src/AppImageUpdater.ts"],"names":[],"mappings":"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","sourcesContent":["import { AllPublishOptions, newError } from \"builder-util-runtime\"\r\nimport { execFileSync, spawn } from \"child_process\"\r\nimport isDev from \"electron-is-dev\"\r\nimport { chmod, unlinkSync } from \"fs-extra-p\"\r\nimport * as path from \"path\"\r\nimport \"source-map-support/register\"\r\nimport { DownloadUpdateOptions } from \"./AppUpdater\"\r\nimport { BaseUpdater } from \"./BaseUpdater\"\r\nimport { FileWithEmbeddedBlockMapDifferentialDownloader } from \"./differentialDownloader/FileWithEmbeddedBlockMapDifferentialDownloader\"\r\nimport { UpdateCheckResult } from \"./main\"\r\nimport { findFile } from \"./providers/Provider\"\r\n\r\nexport class AppImageUpdater extends BaseUpdater {\r\n  constructor(options?: AllPublishOptions | null, app?: any) {\r\n    super(options, app)\r\n  }\r\n\r\n  checkForUpdatesAndNotify(): Promise<UpdateCheckResult | null> {\r\n    if (isDev) {\r\n      return Promise.resolve(null)\r\n    }\r\n\r\n    if (process.env.APPIMAGE == null) {\r\n      if (process.env.SNAP == null) {\r\n        this._logger.warn(\"APPIMAGE env is not defined, current application is not an AppImage\")\r\n      }\r\n      else {\r\n        this._logger.info(\"SNAP env is defined, updater is disabled\")\r\n      }\r\n      return Promise.resolve(null)\r\n    }\r\n\r\n    return super.checkForUpdatesAndNotify()\r\n  }\r\n\r\n  /*** @private */\r\n  protected async doDownloadUpdate(downloadUpdateOptions: DownloadUpdateOptions): Promise<Array<string>> {\r\n    const provider = await this.provider\r\n    const fileInfo = findFile(provider.resolveFiles(downloadUpdateOptions.updateInfo), \"AppImage\")!!\r\n    return await this.executeDownload({\r\n      fileExtension: \"AppImage\",\r\n      fileInfo,\r\n      downloadUpdateOptions,\r\n      task: async (updateFile, downloadOptions) => {\r\n        const oldFile = process.env.APPIMAGE!!\r\n        if (oldFile == null) {\r\n          throw newError(\"APPIMAGE env is not defined\", \"ERR_UPDATER_OLD_FILE_NOT_FOUND\")\r\n        }\r\n\r\n        let isDownloadFull = false\r\n        try {\r\n          await new FileWithEmbeddedBlockMapDifferentialDownloader(fileInfo.info, this.httpExecutor, {\r\n            newUrl: fileInfo.url.href,\r\n            oldFile,\r\n            logger: this._logger,\r\n            newFile: updateFile,\r\n            useMultipleRangeRequest: provider.useMultipleRangeRequest,\r\n            requestHeaders: downloadUpdateOptions.requestHeaders,\r\n          })\r\n            .download()\r\n        }\r\n        catch (e) {\r\n          this._logger.error(`Cannot download differentially, fallback to full download: ${e.stack || e}`)\r\n          // during test (developer machine mac) we must throw error\r\n          isDownloadFull = process.platform === \"linux\"\r\n        }\r\n\r\n        if (isDownloadFull) {\r\n          await this.httpExecutor.download(fileInfo.url.href, updateFile, downloadOptions)\r\n        }\r\n\r\n        await chmod(updateFile, 0o755)\r\n      },\r\n    })\r\n  }\r\n\r\n  protected async doInstall(installerPath: string, isSilent: boolean, isRunAfter: boolean): Promise<boolean> {\r\n    const appImageFile = process.env.APPIMAGE!!\r\n    if (appImageFile == null) {\r\n      throw newError(\"APPIMAGE env is not defined\", \"ERR_UPDATER_OLD_FILE_NOT_FOUND\")\r\n    }\r\n\r\n    // https://stackoverflow.com/a/1712051/1910191\r\n    unlinkSync(appImageFile)\r\n\r\n    let destination: string\r\n    const existingBaseName = path.basename(appImageFile)\r\n    // https://github.com/electron-userland/electron-builder/issues/2964\r\n    // if no version in existing file name, it means that user wants to preserve current custom name\r\n    if (path.basename(installerPath) === existingBaseName || !/\\d+\\.\\d+\\.\\d+/.test(existingBaseName)) {\r\n      // no version in the file name, overwrite existing\r\n      destination = appImageFile\r\n    }\r\n    else {\r\n      destination = path.join(path.dirname(appImageFile), path.basename(installerPath))\r\n    }\r\n\r\n    execFileSync(\"mv\", [\"-f\", installerPath, destination])\r\n\r\n    const env: any = {\r\n      ...process.env,\r\n      APPIMAGE_SILENT_INSTALL: \"true\",\r\n    }\r\n\r\n    if (isRunAfter) {\r\n      spawn(destination, [], {\r\n        detached: true,\r\n        stdio: \"ignore\",\r\n        env,\r\n      })\r\n        .unref()\r\n    }\r\n    else {\r\n      env.APPIMAGE_EXIT_AFTER_INSTALL = \"true\"\r\n      execFileSync(destination, [], {env})\r\n    }\r\n    return true\r\n  }\r\n}"],"sourceRoot":""}
