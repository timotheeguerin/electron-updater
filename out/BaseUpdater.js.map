{"version":3,"sources":["../src/BaseUpdater.ts"],"names":[],"mappings":";;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEM,MAAgB,WAAhB,SAAoC,wBAApC,CAA8C;AAIlD,EAAA,WAAA,CAAsB,OAAtB,EAA0D,GAA1D,EAAmE;AACjE,UAAM,OAAN,EAAe,GAAf;AAJQ,SAAA,oBAAA,GAAuB,KAAvB;AACF,SAAA,gBAAA,GAAmB,KAAnB;AAIP;;AAED,QAAM,cAAN,CAAqB,QAAA,GAAoB,KAAzC,EAAgD,eAAA,GAA2B,KAA3E,EAAgF;AAC9E,SAAK,OAAL,CAAa,IAAb,CAAkB,oCAAlB;;AACA,UAAM,WAAW,GAAG,MAAM,KAAK,OAAL,CAAa,QAAb,EAAuB,QAAQ,GAAG,eAAH,GAAqB,IAApD,CAA1B;;AACA,QAAI,WAAJ,EAAiB;AACf,MAAA,YAAY,CAAC,MAAK;AAChB,YAAI,KAAK,GAAL,CAAS,IAAT,KAAkB,SAAtB,EAAiC;AAC/B,eAAK,GAAL,CAAS,IAAT;AACD;AACF,OAJW,CAAZ;AAKD,KAND,MAOK;AACH,WAAK,oBAAL,GAA4B,KAA5B;AACD;AACF;;AAES,EAAA,eAAe,CAAC,WAAD,EAAkC;AACzD,WAAO,MAAM,eAAN,CAAqB,MAAA,CAAA,MAAA,CAAA,EAAA,EACvB,WADuB,EACZ;AACd,MAAA,IAAI,EAAE,YAAW;AACf,aAAK,cAAL;AACD;AAHa,KADY,CAArB,CAAP;AAMD;;AAIS,QAAM,OAAN,CAAc,QAAd,EAAiC,UAAjC,EAAoD;AAC5D,QAAI,KAAK,oBAAT,EAA+B;AAC7B,WAAK,OAAL,CAAa,IAAb,CAAkB,2DAAlB;;AACA,aAAO,KAAP;AACD;;AAED,UAAM,aAAa,GAAG,KAAK,sBAAL,CAA4B,IAAlD,CAN4D,CAO5D;AACA;;AACA,QAAI,aAAa,IAAI,IAArB,EAA2B;AACzB,WAAK,aAAL,CAAmB,IAAI,KAAJ,CAAU,mDAAV,CAAnB;AACA,aAAO,KAAP;AACD,KAZ2D,CAc5D;;;AACA,SAAK,oBAAL,GAA4B,IAA5B;;AAEA,QAAI;AACF,WAAK,OAAL,CAAa,IAAb,CAAkB,sBAAsB,QAAQ,iBAAiB,UAAU,EAA3E;;AACA,aAAO,MAAM,KAAK,SAAL,CAAe,aAAf,EAA8B,QAA9B,EAAwC,UAAxC,CAAb;AACD,KAHD,CAIA,OAAO,CAAP,EAAU;AACR,WAAK,aAAL,CAAmB,CAAnB;AACA,aAAO,KAAP;AACD;AACF;;AAES,EAAA,cAAc,GAAA;AACtB,QAAI,KAAK,gBAAL,IAAyB,CAAC,KAAK,oBAAnC,EAAyD;AACvD;AACD;;AAED,SAAK,gBAAL,GAAwB,IAAxB;AAEA,SAAK,GAAL,CAAS,IAAT,CAAc,MAAd,EAAsB,YAAW;AAC/B,UAAI,CAAC,KAAK,oBAAV,EAAgC;AAC9B,aAAK,OAAL,CAAa,IAAb,CAAkB,6BAAlB;;AACA,cAAM,KAAK,OAAL,CAAa,IAAb,EAAmB,KAAnB,CAAN;AACD,OAHD,MAIK;AACH,aAAK,OAAL,CAAa,IAAb,CAAkB,oEAAlB;AACD;AACF,KARD;AASD;;AA7EiD,C","sourcesContent":["import { AllPublishOptions } from \"builder-util-runtime\"\r\nimport { AppUpdater, DownloadExecutorTask } from \"./AppUpdater\"\r\n\r\nexport abstract class BaseUpdater extends AppUpdater {\r\n  protected quitAndInstallCalled = false\r\n  private quitHandlerAdded = false\r\n\r\n  protected constructor(options?: AllPublishOptions | null, app?: any) {\r\n    super(options, app)\r\n  }\r\n\r\n  async quitAndInstall(isSilent: boolean = false, isForceRunAfter: boolean = false): Promise<void> {\r\n    this._logger.info(`Install on explicit quitAndInstall`)\r\n    const isInstalled = await this.install(isSilent, isSilent ? isForceRunAfter : true)\r\n    if (isInstalled) {\r\n      setImmediate(() => {\r\n        if (this.app.quit !== undefined) {\r\n          this.app.quit()\r\n        }\r\n      })\r\n    }\r\n    else {\r\n      this.quitAndInstallCalled = false\r\n    }\r\n  }\r\n\r\n  protected executeDownload(taskOptions: DownloadExecutorTask): Promise<Array<string>> {\r\n    return super.executeDownload({\r\n      ...taskOptions,\r\n      done: async () => {\r\n        this.addQuitHandler()\r\n      }\r\n    })\r\n  }\r\n\r\n  protected abstract doInstall(installerPath: string, isSilent: boolean, isRunAfter: boolean): Promise<boolean>\r\n\r\n  protected async install(isSilent: boolean, isRunAfter: boolean): Promise<boolean> {\r\n    if (this.quitAndInstallCalled) {\r\n      this._logger.warn(\"install call ignored: quitAndInstallCalled is set to true\")\r\n      return false\r\n    }\r\n\r\n    const installerPath = this.downloadedUpdateHelper.file\r\n    // todo check (for now it is ok to no check as before, cached (from previous launch) update file checked in any case)\r\n    // const isValid = await this.isUpdateValid(installerPath)\r\n    if (installerPath == null) {\r\n      this.dispatchError(new Error(\"No valid update available, can't quit and install\"))\r\n      return false\r\n    }\r\n\r\n    // prevent calling several times\r\n    this.quitAndInstallCalled = true\r\n\r\n    try {\r\n      this._logger.info(`Install: isSilent: ${isSilent}, isRunAfter: ${isRunAfter}`)\r\n      return await this.doInstall(installerPath, isSilent, isRunAfter)\r\n    }\r\n    catch (e) {\r\n      this.dispatchError(e)\r\n      return false\r\n    }\r\n  }\r\n\r\n  protected addQuitHandler() {\r\n    if (this.quitHandlerAdded || !this.autoInstallOnAppQuit) {\r\n      return\r\n    }\r\n\r\n    this.quitHandlerAdded = true\r\n\r\n    this.app.once(\"quit\", async () => {\r\n      if (!this.quitAndInstallCalled) {\r\n        this._logger.info(\"Auto install update on quit\")\r\n        await this.install(true, false)\r\n      }\r\n      else {\r\n        this._logger.info(\"Update installer has already been triggered. Quitting application.\")\r\n      }\r\n    })\r\n  }\r\n}"],"sourceRoot":""}
