{"version":3,"sources":["../src/DownloadedUpdateHelper.ts"],"names":[],"mappings":";;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;;;;;;AAEA;AACM,MAAO,sBAAP,CAA6B;AAOjC,EAAA,WAAA,CAAqB,QAArB,EAAqC;AAAhB,SAAA,QAAA,GAAA,QAAA;AANb,SAAA,KAAA,GAAuB,IAAvB;AACA,SAAA,YAAA,GAA8B,IAA9B;AAEA,SAAA,WAAA,GAAiC,IAAjC;AACA,SAAA,QAAA,GAA0C,IAA1C;AAGP;;AAED,MAAI,IAAJ,GAAQ;AACN,WAAO,KAAK,KAAZ;AACD;;AAED,MAAI,WAAJ,GAAe;AACb,WAAO,KAAK,YAAZ;AACD;;AAED,QAAM,sBAAN,CAA6B,UAA7B,EAAiD,WAAjD,EAA0E,QAA1E,EAA4G,MAA5G,EAA0H;AACxH,QAAI,KAAK,WAAL,IAAoB,IAApB,IAA4B,KAAK,IAAL,KAAc,UAA1C,IAAwD,KAAK,QAAL,IAAiB,IAA7E,EAAmF;AACjF;AACA;AACA,UAAI,uBAAQ,KAAK,WAAb,EAA0B,WAA1B,KAA0C,uBAAQ,KAAK,QAAL,CAAc,IAAtB,EAA4B,QAAQ,CAAC,IAArC,CAA1C,KAAyF,MAAM,4BAAW,UAAX,CAA/F,CAAJ,EAA4H;AAC1H,eAAO,UAAP;AACD,OAFD,MAGK;AACH,eAAO,IAAP;AACD;AACF,KAVuH,CAYxH;;;AACA,UAAM,gBAAgB,GAAG,MAAM,KAAK,wBAAL,CAA8B,QAA9B,EAAwC,MAAxC,CAA/B;;AACA,QAAI,gBAAgB,IAAI,IAAxB,EAA8B;AAC5B,aAAO,IAAP;AACD;;AACD,IAAA,MAAM,CAAC,IAAP,CAAY,yCAAyC,UAAU,IAA/D;AACA,WAAO,gBAAP;AACD;;AAED,EAAA,iBAAiB,CAAC,cAAD,EAAyB,WAAzB,EAAqD,WAArD,EAA8E,QAA9E,EAA8G;AAC7H,SAAK,KAAL,GAAa,cAAb;AACA,SAAK,YAAL,GAAoB,WAApB;AACA,SAAK,WAAL,GAAmB,WAAnB;AACA,SAAK,QAAL,GAAgB,QAAhB;AACD;;AAED,QAAM,eAAN,CAAsB,cAAtB,EAA4C;AAC1C,UAAM,IAAI,GAAqB;AAC7B,MAAA,QAAQ,EAAE,cADmB;AAE7B,MAAA,MAAM,EAAE,KAAK,QAAL,CAAgB,IAAhB,CAAqB;AAFA,KAA/B;AAIA,UAAM,4BAAW,IAAI,CAAC,IAAL,CAAU,KAAK,QAAf,EAAyB,kBAAzB,CAAX,EAAyD,IAAzD,CAAN;AACD;;AAED,QAAM,KAAN,GAAW;AACT,SAAK,KAAL,GAAa,IAAb;AACA,SAAK,YAAL,GAAoB,IAApB;AACA,SAAK,WAAL,GAAmB,IAAnB;AACA,SAAK,QAAL,GAAgB,IAAhB;AACA,UAAM,KAAK,aAAL,EAAN;AACD;;AAEO,QAAM,aAAN,GAAmB;AACzB,QAAI;AACF;AACA,YAAM,0BAAS,KAAK,QAAd,CAAN;AACD,KAHD,CAIA,OAAO,MAAP,EAAe,CACb;AACD;AACF;;AAEO,QAAM,wBAAN,CAA+B,QAA/B,EAAiE,MAAjE,EAA+E;AACrF,QAAI,UAAJ;AACA,UAAM,cAAc,GAAG,IAAI,CAAC,IAAL,CAAU,KAAK,QAAf,EAAyB,kBAAzB,CAAvB;;AACA,QAAI;AACF,MAAA,UAAU,GAAG,MAAM,0BAAS,cAAT,CAAnB;AACD,KAFD,CAGA,OAAO,CAAP,EAAU;AACR,UAAI,OAAO,GAAG,iCAAd;;AACA,UAAI,CAAC,CAAC,IAAF,KAAW,QAAf,EAAyB;AACvB,cAAM,KAAK,aAAL,EAAN;AACA,QAAA,OAAO,IAAI,oBAAoB,CAAC,CAAC,OAAO,GAAxC;AACD;;AACD,MAAA,MAAM,CAAC,IAAP,CAAY,OAAZ;AACA,aAAO,IAAP;AACD;;AAED,QAAI,UAAU,CAAC,QAAX,IAAuB,IAA3B,EAAiC;AAC/B,MAAA,MAAM,CAAC,IAAP,CAAY,2FAAZ;AACA,YAAM,KAAK,aAAL,EAAN;AACA,aAAO,IAAP;AACD;;AAED,QAAI,QAAQ,CAAC,IAAT,CAAc,MAAd,KAAyB,UAAU,CAAC,MAAxC,EAAgD;AAC9C,MAAA,MAAM,CAAC,IAAP,CAAY,mHAAmH,UAAU,CAAC,MAAM,eAAe,QAAQ,CAAC,IAAT,CAAc,MAAM,+CAAnL;AACA,YAAM,KAAK,aAAL,EAAN;AACA,aAAO,IAAP;AACD;;AAED,UAAM,UAAU,GAAG,IAAI,CAAC,IAAL,CAAU,KAAK,QAAf,EAAyB,UAAU,CAAC,QAApC,CAAnB;;AACA,QAAI,EAAE,MAAM,4BAAW,UAAX,CAAR,CAAJ,EAAqC;AACnC,MAAA,MAAM,CAAC,IAAP,CAAY,+EAAZ;AACA,YAAM,KAAK,aAAL,EAAN;AACA,aAAO,IAAP;AACD;;AAED,UAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,UAAD,CAA7B;;AACA,QAAI,QAAQ,CAAC,IAAT,CAAc,MAAd,KAAyB,MAA7B,EAAqC;AACnC,MAAA,MAAM,CAAC,IAAP,CAAY,qGAAqG,MAAM,eAAe,QAAQ,CAAC,IAAT,CAAc,MAAM,EAA1J;AACA,YAAM,KAAK,aAAL,EAAN;AACA,aAAO,IAAP;AACD;;AACD,WAAO,UAAP;AACD;;AAlHgC;;;;AA0HnC,SAAS,QAAT,CAAkB,IAAlB,EAAgC,SAAA,GAAoB,QAApD,EAA8D,QAAA,GAA6B,QAA3F,EAAqG,OAArG,EAAkH;AAChH,SAAO,IAAI,OAAJ,CAAoB,CAAC,OAAD,EAAU,MAAV,KAAoB;AAC7C,UAAM,IAAI,GAAG,0BAAW,SAAX,CAAb;AACA,IAAA,IAAI,CACD,EADH,CACM,OADN,EACe,MADf,EAEG,WAFH,CAEe,QAFf;AAIA,gCAAiB,IAAjB,EAAqB,MAAA,CAAA,MAAA,CAAA,EAAA,EAAM,OAAN,EAAa;AAAE,MAAA,aAAa,EAAE,OAAO;AAAK;;AAA7B,KAAb,CAArB,EACG,EADH,CACM,OADN,EACe,MADf,EAEG,EAFH,CAEM,KAFN,EAEa,MAAK;AACd,MAAA,IAAI,CAAC,GAAL;AACA,MAAA,OAAO,CAAC,IAAI,CAAC,IAAL,EAAD,CAAP;AACD,KALH,EAMG,IANH,CAMQ,IANR,EAMc;AAAC,MAAA,GAAG,EAAE;AAAN,KANd;AAOD,GAbM,CAAP;AAcD,C","sourcesContent":["import { UpdateInfo } from \"builder-util-runtime\"\r\nimport { createHash } from \"crypto\"\r\nimport { createReadStream } from \"fs\"\r\nimport isEqual from \"lodash.isequal\"\r\nimport { Logger, ResolvedUpdateFileInfo } from \"./main\"\r\nimport { pathExists, readJson, emptyDir, outputJson } from \"fs-extra-p\"\r\nimport * as path from \"path\"\r\n\r\n/** @private **/\r\nexport class DownloadedUpdateHelper {\r\n  private _file: string | null = null\r\n  private _packageFile: string | null = null\r\n\r\n  private versionInfo: UpdateInfo | null = null\r\n  private fileInfo: ResolvedUpdateFileInfo | null = null\r\n\r\n  constructor(readonly cacheDir: string) {\r\n  }\r\n\r\n  get file() {\r\n    return this._file\r\n  }\r\n\r\n  get packageFile() {\r\n    return this._packageFile\r\n  }\r\n\r\n  async validateDownloadedPath(updateFile: string, versionInfo: UpdateInfo, fileInfo: ResolvedUpdateFileInfo, logger: Logger): Promise<string | null> {\r\n    if (this.versionInfo != null && this.file === updateFile && this.fileInfo != null) {\r\n      // update has already been downloaded from this running instance\r\n      // check here only existence, not checksum\r\n      if (isEqual(this.versionInfo, versionInfo) && isEqual(this.fileInfo.info, fileInfo.info) && (await pathExists(updateFile))) {\r\n        return updateFile\r\n      }\r\n      else {\r\n        return null\r\n      }\r\n    }\r\n\r\n    // update has already been downloaded from some previous app launch\r\n    const cachedUpdateFile = await this.getValidCachedUpdateFile(fileInfo, logger)\r\n    if (cachedUpdateFile == null) {\r\n      return null\r\n    }\r\n    logger.info(`Update has already been downloaded to ${updateFile}).`)\r\n    return cachedUpdateFile\r\n  }\r\n\r\n  setDownloadedFile(downloadedFile: string, packageFile: string | null, versionInfo: UpdateInfo, fileInfo: ResolvedUpdateFileInfo) {\r\n    this._file = downloadedFile\r\n    this._packageFile = packageFile\r\n    this.versionInfo = versionInfo\r\n    this.fileInfo = fileInfo\r\n  }\r\n\r\n  async cacheUpdateInfo(updateFileName: string) {\r\n    const data: CachedUpdateInfo = {\r\n      fileName: updateFileName,\r\n      sha512: this.fileInfo!!.info.sha512,\r\n    }\r\n    await outputJson(path.join(this.cacheDir, \"update-info.json\"), data)\r\n  }\r\n\r\n  async clear() {\r\n    this._file = null\r\n    this._packageFile = null\r\n    this.versionInfo = null\r\n    this.fileInfo = null\r\n    await this.cleanCacheDir()\r\n  }\r\n\r\n  private async cleanCacheDir(): Promise<void> {\r\n    try {\r\n      // remove stale data\r\n      await emptyDir(this.cacheDir)\r\n    }\r\n    catch (ignore) {\r\n      // ignore\r\n    }\r\n  }\r\n\r\n  private async getValidCachedUpdateFile(fileInfo: ResolvedUpdateFileInfo, logger: Logger): Promise<string | null> {\r\n    let cachedInfo: CachedUpdateInfo\r\n    const updateInfoFile = path.join(this.cacheDir, \"update-info.json\")\r\n    try {\r\n      cachedInfo = await readJson(updateInfoFile)\r\n    }\r\n    catch (e) {\r\n      let message = `No cached update info available`\r\n      if (e.code !== \"ENOENT\") {\r\n        await this.cleanCacheDir()\r\n        message += ` (error on read: ${e.message})`\r\n      }\r\n      logger.info(message)\r\n      return null\r\n    }\r\n\r\n    if (cachedInfo.fileName == null) {\r\n      logger.warn(`Cached update info is corrupted: no fileName, directory for cached update will be cleaned`)\r\n      await this.cleanCacheDir()\r\n      return null\r\n    }\r\n\r\n    if (fileInfo.info.sha512 !== cachedInfo.sha512) {\r\n      logger.info(`Cached update sha512 checksum doesn't match the latest available update. New update must be downloaded. Cached: ${cachedInfo.sha512}, expected: ${fileInfo.info.sha512}. Directory for cached update will be cleaned`)\r\n      await this.cleanCacheDir()\r\n      return null\r\n    }\r\n\r\n    const updateFile = path.join(this.cacheDir, cachedInfo.fileName)\r\n    if (!(await pathExists(updateFile))) {\r\n      logger.info(\"Cached update file doesn't exist, directory for cached update will be cleaned\")\r\n      await this.cleanCacheDir()\r\n      return null\r\n    }\r\n\r\n    const sha512 = await hashFile(updateFile)\r\n    if (fileInfo.info.sha512 !== sha512) {\r\n      logger.warn(`Sha512 checksum doesn't match the latest available update. New update must be downloaded. Cached: ${sha512}, expected: ${fileInfo.info.sha512}`)\r\n      await this.cleanCacheDir()\r\n      return null\r\n    }\r\n    return updateFile\r\n  }\r\n}\r\n\r\ninterface CachedUpdateInfo {\r\n  fileName: string\r\n  sha512: string\r\n}\r\n\r\nfunction hashFile(file: string, algorithm: string = \"sha512\", encoding: \"base64\" | \"hex\" = \"base64\", options?: any) {\r\n  return new Promise<string>((resolve, reject) => {\r\n    const hash = createHash(algorithm)\r\n    hash\r\n      .on(\"error\", reject)\r\n      .setEncoding(encoding)\r\n\r\n    createReadStream(file, {...options, highWaterMark: 1024 * 1024 /* better to use more memory but hash faster */})\r\n      .on(\"error\", reject)\r\n      .on(\"end\", () => {\r\n        hash.end()\r\n        resolve(hash.read() as string)\r\n      })\r\n      .pipe(hash, {end: false})\r\n  })\r\n}"],"sourceRoot":""}
