{"version":3,"sources":["../src/NsisUpdater.ts"],"names":[],"mappings":"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","sourcesContent":["import { AllPublishOptions, newError, PackageFileInfo, BlockMap, CURRENT_APP_PACKAGE_FILE_NAME, CURRENT_APP_INSTALLER_FILE_NAME } from \"builder-util-runtime\"\nimport { spawn } from \"child_process\"\nimport { OutgoingHttpHeaders } from \"http\"\nimport * as path from \"path\"\nimport \"source-map-support/register\"\nimport { DownloadUpdateOptions } from \"./AppUpdater\"\nimport { BaseUpdater } from \"./BaseUpdater\"\nimport { FileWithEmbeddedBlockMapDifferentialDownloader } from \"./differentialDownloader/FileWithEmbeddedBlockMapDifferentialDownloader\"\nimport { GenericDifferentialDownloader } from \"./differentialDownloader/GenericDifferentialDownloader\"\nimport { newUrlFromBase, ResolvedUpdateFileInfo } from \"./main\"\nimport { configureRequestOptionsFromUrl, findFile, Provider } from \"./providers/Provider\"\nimport { unlink } from \"fs-extra-p\"\nimport { verifySignature } from \"./windowsExecutableCodeSignatureVerifier\"\nimport { URL } from \"url\"\n\nexport class NsisUpdater extends BaseUpdater {\n  constructor(options?: AllPublishOptions | null, app?: any) {\n    super(options, app)\n  }\n\n  /*** @private */\n  protected async doDownloadUpdate(downloadUpdateOptions: DownloadUpdateOptions): Promise<Array<string>> {\n    const provider = await this.provider\n    const fileInfo = findFile(provider.resolveFiles(downloadUpdateOptions.updateInfo), \"exe\")!!\n    return await this.executeDownload({\n      fileExtension: \"exe\",\n      downloadUpdateOptions,\n      fileInfo,\n      task: async (destinationFile, downloadOptions, packageFile, removeTempDirIfAny) => {\n        const packageInfo = fileInfo.packageInfo\n        const isWebInstaller = packageInfo != null && packageFile != null\n        if (isWebInstaller || await this.differentialDownloadInstaller(fileInfo, downloadUpdateOptions, destinationFile, downloadUpdateOptions.requestHeaders, provider)) {\n          await this.httpExecutor.download(fileInfo.url.href, destinationFile, downloadOptions)\n        }\n\n        const signatureVerificationStatus = await this.verifySignature(destinationFile)\n        if (signatureVerificationStatus != null) {\n          await removeTempDirIfAny()\n          // noinspection ThrowInsideFinallyBlockJS\n          throw newError(`New version ${downloadUpdateOptions.updateInfo!.version} is not signed by the application owner: ${signatureVerificationStatus}`, \"ERR_UPDATER_INVALID_SIGNATURE\")\n        }\n\n        if (isWebInstaller) {\n          if (await this.differentialDownloadWebPackage(packageInfo!!, packageFile!!, provider)) {\n            try {\n              await this.httpExecutor.download(packageInfo!!.path, packageFile!!, {\n                skipDirCreation: true,\n                headers: downloadUpdateOptions.requestHeaders,\n                cancellationToken: downloadUpdateOptions.cancellationToken,\n                sha512: packageInfo!!.sha512,\n              })\n            }\n            catch (e) {\n              try {\n                await unlink(packageFile!!)\n              }\n              catch (ignored) {\n                // ignore\n              }\n\n              throw e\n            }\n          }\n        }\n      },\n    })\n  }\n\n  // $certificateInfo = (Get-AuthenticodeSignature 'xxx\\yyy.exe'\n  // | where {$_.Status.Equals([System.Management.Automation.SignatureStatus]::Valid) -and $_.SignerCertificate.Subject.Contains(\"CN=siemens.com\")})\n  // | Out-String ; if ($certificateInfo) { exit 0 } else { exit 1 }\n  private async verifySignature(tempUpdateFile: string): Promise<string | null> {\n    let publisherName: Array<string> | string | null\n    try {\n      publisherName = (await this.configOnDisk.value).publisherName\n      if (publisherName == null) {\n        return null\n      }\n    }\n    catch (e) {\n      if (e.code === \"ENOENT\") {\n        // no app-update.yml\n        return null\n      }\n      throw e\n    }\n    return await verifySignature(Array.isArray(publisherName) ? publisherName : [publisherName], tempUpdateFile, this._logger)\n  }\n\n  protected async doInstall(installerPath: string, isSilent: boolean, isForceRunAfter: boolean): Promise<boolean> {\n    const args = [\"--updated\"]\n    if (isSilent) {\n      args.push(\"/S\")\n    }\n\n    if (isForceRunAfter) {\n      args.push(\"--force-run\")\n    }\n\n    const packagePath = this.downloadedUpdateHelper.packageFile\n    if (packagePath != null) {\n      // only = form is supported\n      args.push(`--package-file=\"${packagePath}\"`)\n    }\n\n    const spawnOptions: any = {\n      detached: true,\n      stdio: \"ignore\",\n    }\n\n    try {\n      await this._spawn(installerPath, args, spawnOptions)\n    }\n    catch (e) {\n      // yes, such errors dispatched not as error event\n      // https://github.com/electron-userland/electron-builder/issues/1129\n      if ((e as any).code === \"UNKNOWN\" || (e as any).code === \"EACCES\") { // Node 8 sends errors: https://nodejs.org/dist/latest-v8.x/docs/api/errors.html#errors_common_system_errors\n        this._logger.info(\"Access denied or UNKNOWN error code on spawn, will be executed again using elevate\")\n        try {\n          await this._spawn(path.join(process.resourcesPath!, \"elevate.exe\"), [installerPath].concat(args), spawnOptions)\n        }\n        catch (e) {\n          this.dispatchError(e)\n        }\n      }\n      else {\n        this.dispatchError(e)\n      }\n    }\n\n    return true\n  }\n\n  /**\n   * This handles both node 8 and node 10 way of emitting error when spawing a process\n   *   - node 8: Throws the error\n   *   - node 10: Emit the error(Need to listen with on)\n   */\n  private async _spawn(exe: string, args: Array<string>, options: any) {\n    return new Promise((resolve, reject) => {\n\n      try {\n        const process = spawn(exe, args, options)\n        process.on(\"error\", error => {\n          reject(error)\n        })\n        process.unref()\n\n        if (process.pid !== undefined) {\n          resolve(true)\n        }\n      } catch (error) {\n        reject(error)\n      }\n    })\n\n  }\n\n  // private downloadBlockMap(provider: Provider<any>) {\n  //   await provider.getBytes(newBlockMapUrl, cancellationToken)\n  // }\n\n  private async differentialDownloadInstaller(fileInfo: ResolvedUpdateFileInfo, downloadUpdateOptions: DownloadUpdateOptions, installerPath: string, requestHeaders: OutgoingHttpHeaders, provider: Provider<any>) {\n    try {\n      const newBlockMapUrl = newUrlFromBase(`${fileInfo.url.pathname}.blockmap`, fileInfo.url)\n      const oldBlockMapUrl = newUrlFromBase(`${fileInfo.url.pathname.replace(new RegExp(downloadUpdateOptions.updateInfo.version, \"g\"), this.currentVersion.version)}.blockmap`, fileInfo.url)\n      this._logger.info(`Download block maps (old: \"${oldBlockMapUrl.href}\", new: ${newBlockMapUrl.href})`)\n\n      const downloadBlockMap = async (url: URL): Promise<BlockMap> => {\n        const requestOptions = configureRequestOptionsFromUrl(url, {headers: downloadUpdateOptions.requestHeaders});\n        (requestOptions as any).gzip = true\n        const data = await this.httpExecutor.request(requestOptions, downloadUpdateOptions.cancellationToken)\n        if (data == null) {\n          throw new Error(`Blockmap \"${url.href}\" is empty`)\n        }\n\n        try {\n          return JSON.parse(data)\n        }\n        catch (e) {\n          throw new Error(`Cannot parse blockmap \"${url.href}\", error: ${e}, raw data: ${data}`)\n        }\n      }\n\n      const blockMapData = await downloadBlockMap(newBlockMapUrl)\n      const oldBlockMapData = await downloadBlockMap(oldBlockMapUrl)\n      await new GenericDifferentialDownloader(fileInfo.info, this.httpExecutor, {\n        newUrl: fileInfo.url.href,\n        oldFile: path.join(this.app.getPath(\"userData\"), CURRENT_APP_INSTALLER_FILE_NAME),\n        logger: this._logger,\n        newFile: installerPath,\n        useMultipleRangeRequest: provider.useMultipleRangeRequest,\n        requestHeaders,\n      })\n        .download(oldBlockMapData, blockMapData)\n    }\n    catch (e) {\n      this._logger.error(`Cannot download differentially, fallback to full download: ${e.stack || e}`)\n      return true\n    }\n\n    return false\n  }\n\n  private async differentialDownloadWebPackage(packageInfo: PackageFileInfo, packagePath: string, provider: Provider<any>): Promise<boolean> {\n    if (packageInfo.blockMapSize == null) {\n      return true\n    }\n\n    try {\n      await new FileWithEmbeddedBlockMapDifferentialDownloader(packageInfo, this.httpExecutor, {\n        newUrl: packageInfo.path,\n        oldFile: path.join(this.app.getPath(\"userData\"), CURRENT_APP_PACKAGE_FILE_NAME),\n        logger: this._logger,\n        newFile: packagePath,\n        requestHeaders: this.requestHeaders,\n        useMultipleRangeRequest: provider.useMultipleRangeRequest,\n      })\n        .download()\n    }\n    catch (e) {\n      this._logger.error(`Cannot download differentially, fallback to full download: ${e.stack || e}`)\n      // during test (developer machine mac or linux) we must throw error\n      return process.platform === \"win32\"\n    }\n    return false\n  }\n}\n"],"sourceRoot":""}