{"version":3,"sources":["../src/MacUpdater.ts"],"names":[],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGM,MAAO,UAAP,SAA0B,wBAA1B,CAAoC;AAGxC,EAAA,WAAA,CAAY,OAAZ,EAAuC;AACrC,UAAM,OAAN;AAHe,SAAA,aAAA,GAA6B,OAAO,CAAC,UAAD,CAAP,CAAoB,WAAjD;AAKf,SAAK,aAAL,CAAmB,EAAnB,CAAsB,OAAtB,EAA+B,EAAE,IAAG;AAClC,WAAK,OAAL,CAAa,IAAb,CAAkB,EAAlB;;AACA,WAAK,IAAL,CAAU,OAAV,EAAmB,EAAnB;AACD,KAHD;AAID;;AAES,QAAM,gBAAN,CAAuB,qBAAvB,EAAmE;AAC3E,UAAM,KAAK,GAAG,CAAC,MAAM,KAAK,QAAZ,EAAsB,YAAtB,CAAmC,qBAAqB,CAAC,UAAzD,CAAd;AACA,UAAM,WAAW,GAAG,0BAAS,KAAT,EAAgB,KAAhB,EAAuB,CAAC,KAAD,EAAQ,KAAR,CAAvB,CAApB;;AACA,QAAI,WAAW,IAAI,IAAnB,EAAyB;AACvB,YAAM,oCAAS,0BAA0B,6CAAkB,KAAlB,CAAwB,EAA3D,EAA+D,gCAA/D,CAAN;AACD;;AAED,UAAM,MAAM,GAAG,2BAAf;AACA,IAAA,MAAM,CAAC,EAAP,CAAU,OAAV,EAAmB,MAAK;AACtB,WAAK,OAAL,CAAa,IAAb,CAAkB,2EAA2E,WAAW,CAAC,GAAZ,CAAgB,IAAI,GAAjH;AACD,KAFD;;AAIA,aAAS,YAAT,GAAqB;AACnB,YAAM,OAAO,GAAG,MAAM,CAAC,OAAP,EAAhB;AACA,aAAO,UAAU,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,IAAI,EAAhD;AACD;;AAED,WAAO,MAAM,KAAK,eAAL,CAAqB;AAChC,MAAA,aAAa,EAAE,KADiB;AAEhC,MAAA,QAAQ,EAAE,WAFsB;AAGhC,MAAA,qBAHgC;AAIhC,MAAA,IAAI,EAAE,CAAC,eAAD,EAAkB,eAAlB,KAAqC;AACzC,eAAO,KAAK,YAAL,CAAkB,QAAlB,CAA2B,WAAW,CAAC,GAAZ,CAAgB,IAA3C,EAAiD,eAAjD,EAAkE,eAAlE,CAAP;AACD,OAN+B;AAOhC,MAAA,IAAI,EAAE,MAAM,UAAN,IAAmB;AACvB,YAAI,cAAc,GAAG,WAAW,CAAC,IAAZ,CAAiB,IAAtC;;AACA,YAAI,cAAc,IAAI,IAAtB,EAA4B;AAC1B,UAAA,cAAc,GAAG,CAAC,MAAM,sBAAK,UAAL,CAAP,EAAyB,IAA1C;AACD;;AAED,eAAO,MAAM,IAAI,OAAJ,CAA2B,CAAC,OAAD,EAAU,MAAV,KAAoB;AAC1D,UAAA,MAAM,CAAC,EAAP,CAAU,SAAV,EAAqB,CAAC,OAAD,EAA2B,QAA3B,KAAuD;AAC1E,kBAAM,UAAU,GAAG,OAAO,CAAC,GAA3B;;AACA,iBAAK,OAAL,CAAa,IAAb,CAAkB,GAAG,UAAU,YAA/B;;AACA,gBAAI,UAAU,KAAK,GAAnB,EAAwB;AACtB,oBAAM,IAAI,GAAG,MAAM,CAAC,IAAP,CAAY,aAAa,YAAY,EAAE,aAAvC,CAAb;AACA,cAAA,QAAQ,CAAC,SAAT,CAAmB,GAAnB,EAAwB;AAAC,gCAAgB,kBAAjB;AAAqC,kCAAkB,IAAI,CAAC;AAA5D,eAAxB;AACA,cAAA,QAAQ,CAAC,GAAT,CAAa,IAAb;AACD,aAJD,MAKK,IAAI,UAAU,CAAC,UAAX,CAAsB,UAAtB,CAAJ,EAAuC;AAC1C,kBAAI,aAAa,GAAG,KAApB;AACA,cAAA,QAAQ,CAAC,EAAT,CAAY,QAAZ,EAAsB,MAAK;AACzB,oBAAI;AACF,kBAAA,YAAY,CAAC,MAAM,MAAM,CAAC,KAAP,EAAP,CAAZ;AACD,iBAFD,SAGQ;AACN,sBAAI,CAAC,aAAL,EAAoB;AAClB,yBAAK,aAAL,CAAmB,cAAnB,CAAkC,OAAlC,EAA2C,MAA3C;AACA,oBAAA,OAAO,CAAC,EAAD,CAAP;AACD;AACF;AACF,eAVD;;AAYA,mBAAK,OAAL,CAAa,IAAb,CAAkB,2CAA2C,UAAU,EAAvE;;AAEA,oBAAM,UAAU,GAAG,kCAAiB,UAAjB,CAAnB;AACA,cAAA,UAAU,CAAC,EAAX,CAAc,OAAd,EAAuB,KAAK,IAAG;AAC7B,oBAAI;AACF,kBAAA,QAAQ,CAAC,GAAT;AACD,iBAFD,CAGA,OAAO,CAAP,EAAU;AACR,kBAAA,aAAa,GAAG,IAAhB;AACA,uBAAK,aAAL,CAAmB,cAAnB,CAAkC,OAAlC,EAA2C,MAA3C;AACA,kBAAA,MAAM,CAAC,IAAI,KAAJ,CAAU,gBAAgB,UAAU,MAAM,KAAK,EAA/C,CAAD,CAAN;AACD;AACF,eATD;AAWA,cAAA,QAAQ,CAAC,SAAT,CAAmB,GAAnB,EAAwB;AACtB,gCAAgB,iBADM;AAEtB,kCAAkB;AAFI,eAAxB;AAIA,cAAA,UAAU,CAAC,IAAX,CAAgB,QAAhB;AACD,aAjCI,MAkCA;AACH,mBAAK,OAAL,CAAa,IAAb,CAAkB,GAAG,UAAU,+BAA/B;;AACA,cAAA,QAAQ,CAAC,SAAT,CAAmB,GAAnB;AACA,cAAA,QAAQ,CAAC,GAAT;AACD;AACF,WA/CD;AAgDA,UAAA,MAAM,CAAC,MAAP,CAAc,CAAd,EAAiB,WAAjB,EAA8B,CAA9B,EAAiC,MAAK;AACpC,iBAAK,aAAL,CAAmB,UAAnB,CAA8B,GAAG,YAAY,EAAE,EAA/C,EAAmD;AAAC,+BAAiB;AAAlB,aAAnD;AAEA,iBAAK,aAAL,CAAmB,IAAnB,CAAwB,OAAxB,EAAiC,MAAjC;AACA,iBAAK,aAAL,CAAmB,eAAnB;AACD,WALD;AAMD,SAvDY,CAAb;AAwDD;AArE+B,KAArB,CAAb;AAuED;;AAEO,EAAA,iBAAiB,CAAC,cAAD,EAAiC,GAAjC,EAA8C,OAA9C,EAA4E,MAA5E,EAAmG,iBAAnG,EAAyI,YAAzI,EAA6K;AACpM,UAAM,eAAe,GAAG,KAAK,YAAL,CAAkB,SAAlB,CAA4B,0DAA+B,GAA/B,EAAoC;AAAC,MAAA;AAAD,KAApC,CAA5B,EAA4E,gBAAgB,IAAG;AACrH,YAAM,aAAa,GAAmB;AAAC,wBAAgB;AAAjB,OAAtC;AACA,YAAM,OAAO,GAAe,EAA5B;AACA,YAAM,qBAAqB,GAAG,KAAK,aAAL,CAAmB,yBAAnB,CAA9B;;AACA,WAAK,OAAL,CAAa,IAAb,CAAkB,GAAG,yBAAiB,oBAAoB,qBAAqB,EAA/E;;AACA,MAAA,cAAc,CAAC,SAAf,CAAyB,GAAzB,EAA8B,aAA9B,EALqH,CAOrH;;AACA,UAAI,MAAM,IAAI,IAAd,EAAoB;AAClB;AACA,QAAA,OAAO,CAAC,IAAR,CAAa,KAAI,qCAAJ,EAAoB,MAApB,EAA4B,QAA5B,EAAsC,MAAM,CAAC,MAAP,KAAkB,GAAlB,IAAyB,CAAC,MAAM,CAAC,QAAP,CAAgB,GAAhB,CAA1B,IAAkD,CAAC,MAAM,CAAC,QAAP,CAAgB,GAAhB,CAAnD,IAA2E,CAAC,MAAM,CAAC,QAAP,CAAgB,GAAhB,CAA5E,GAAmG,KAAnG,GAA2G,QAAjJ,CAAb;AACD;;AAED,MAAA,OAAO,CAAC,IAAR,CAAa,cAAb;AAEA,UAAI,UAAU,GAAG,gBAAjB;;AACA,WAAK,MAAM,MAAX,IAAqB,OAArB,EAA8B;AAC5B,QAAA,MAAM,CAAC,EAAP,CAAU,OAAV,EAAmB,YAAnB;AACA,QAAA,UAAU,GAAG,UAAU,CAAC,IAAX,CAAgB,MAAhB,CAAb;AACD;AACF,KApBuB,CAAxB;AAsBA,IAAA,eAAe,CAAC,EAAhB,CAAmB,UAAnB,EAA+B,CAAC,UAAD,EAAqB,MAArB,EAAqC,WAArC,KAA4D;AACzF,UAAI,OAAO,CAAC,aAAR,IAAyB,IAAzB,IAAkC,OAAS,CAAC,aAAV,CAAmC,UAAnC,CAA8C,OAA9C,CAAtC,EAA8F;AAC5F,cAAM,YAAY,GAAG,IAAI,GAAJ,CAAQ,WAAR,CAArB;;AACA,YAAI,YAAY,CAAC,QAAb,CAAsB,QAAtB,CAA+B,gBAA/B,CAAJ,EAAsD;AACpD,iBAAO,OAAO,CAAC,aAAf;AACD;AACF;;AACD,WAAK,iBAAL,CAAuB,cAAvB,EAAuC,WAAvC,EAAoD,OAApD,EAA6D,MAA7D,EAAqE,iBAArE,EAAwF,YAAxF;AACD,KARD;AASA,IAAA,eAAe,CAAC,EAAhB,CAAmB,OAAnB,EAA4B,YAA5B;AACA,IAAA,eAAe,CAAC,GAAhB;AACD;;AAED,EAAA,cAAc,GAAA;AACZ,SAAK,aAAL,CAAmB,cAAnB;AACD;;AA5IuC","sourcesContent":["import { AllPublishOptions, CancellationToken, configureRequestOptionsFromUrl, DigestTransform, newError, RequestHeaders, safeStringifyJson } from \"builder-util-runtime\"\r\nimport { createServer, IncomingMessage, OutgoingHttpHeaders, ServerResponse } from \"http\"\r\nimport { AddressInfo } from \"net\"\r\nimport { AppUpdater, DownloadUpdateOptions } from \"./AppUpdater\"\r\nimport { DOWNLOAD_PROGRESS } from \"./main\"\r\nimport { findFile } from \"./providers/Provider\"\r\nimport { createReadStream, stat } from \"fs-extra-p\"\r\nimport AutoUpdater = Electron.AutoUpdater\r\n\r\nexport class MacUpdater extends AppUpdater {\r\n  private readonly nativeUpdater: AutoUpdater = require(\"electron\").autoUpdater\r\n\r\n  constructor(options?: AllPublishOptions) {\r\n    super(options)\r\n\r\n    this.nativeUpdater.on(\"error\", it => {\r\n      this._logger.warn(it)\r\n      this.emit(\"error\", it)\r\n    })\r\n  }\r\n\r\n  protected async doDownloadUpdate(downloadUpdateOptions: DownloadUpdateOptions): Promise<Array<string>> {\r\n    const files = (await this.provider).resolveFiles(downloadUpdateOptions.updateInfo)\r\n    const zipFileInfo = findFile(files, \"zip\", [\"pkg\", \"dmg\"])\r\n    if (zipFileInfo == null) {\r\n      throw newError(`ZIP file not provided: ${safeStringifyJson(files)}`, \"ERR_UPDATER_ZIP_FILE_NOT_FOUND\")\r\n    }\r\n\r\n    const server = createServer()\r\n    server.on(\"close\", () => {\r\n      this._logger.info(`Proxy server for native Squirrel.Mac is closed (was started to download ${zipFileInfo.url.href})`)\r\n    })\r\n\r\n    function getServerUrl() {\r\n      const address = server.address() as AddressInfo\r\n      return `http://${address.address}:${address.port}`\r\n    }\r\n\r\n    return await this.executeDownload({\r\n      fileExtension: \"zip\",\r\n      fileInfo: zipFileInfo,\r\n      downloadUpdateOptions,\r\n      task: (destinationFile, downloadOptions) => {\r\n        return this.httpExecutor.download(zipFileInfo.url.href, destinationFile, downloadOptions)\r\n      },\r\n      done: async updateFile => {\r\n        let updateFileSize = zipFileInfo.info.size\r\n        if (updateFileSize == null) {\r\n          updateFileSize = (await stat(updateFile)).size\r\n        }\r\n\r\n        return await new Promise<Array<string>>((resolve, reject) => {\r\n          server.on(\"request\", (request: IncomingMessage, response: ServerResponse) => {\r\n            const requestUrl = request.url!!\r\n            this._logger.info(`${requestUrl} requested`)\r\n            if (requestUrl === \"/\") {\r\n              const data = Buffer.from(`{ \"url\": \"${getServerUrl()}/app.zip\" }`)\r\n              response.writeHead(200, {\"Content-Type\": \"application/json\", \"Content-Length\": data.length})\r\n              response.end(data)\r\n            }\r\n            else if (requestUrl.startsWith(\"/app.zip\")) {\r\n              let errorOccurred = false\r\n              response.on(\"finish\", () => {\r\n                try {\r\n                  setImmediate(() => server.close())\r\n                }\r\n                finally {\r\n                  if (!errorOccurred) {\r\n                    this.nativeUpdater.removeListener(\"error\", reject)\r\n                    resolve([])\r\n                  }\r\n                }\r\n              })\r\n\r\n              this._logger.info(`app.zip requested by Squirrel.Mac, pipe ${updateFile}`)\r\n\r\n              const readStream = createReadStream(updateFile)\r\n              readStream.on(\"error\", error => {\r\n                try {\r\n                  response.end()\r\n                }\r\n                catch (e) {\r\n                  errorOccurred = true\r\n                  this.nativeUpdater.removeListener(\"error\", reject)\r\n                  reject(new Error(`Cannot pipe \"${updateFile}\": ${error}`))\r\n                }\r\n              })\r\n\r\n              response.writeHead(200, {\r\n                \"Content-Type\": \"application/zip\",\r\n                \"Content-Length\": updateFileSize,\r\n              })\r\n              readStream.pipe(response)\r\n            }\r\n            else {\r\n              this._logger.warn(`${requestUrl} requested, but not supported`)\r\n              response.writeHead(404)\r\n              response.end()\r\n            }\r\n          })\r\n          server.listen(0, \"127.0.0.1\", 8, () => {\r\n            this.nativeUpdater.setFeedURL(`${getServerUrl()}`, {\"Cache-Control\": \"no-cache\"})\r\n\r\n            this.nativeUpdater.once(\"error\", reject)\r\n            this.nativeUpdater.checkForUpdates()\r\n          })\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  private doProxyUpdateFile(nativeResponse: ServerResponse, url: string, headers: OutgoingHttpHeaders, sha512: string | null, cancellationToken: CancellationToken, errorHandler: (error: Error) => void) {\r\n    const downloadRequest = this.httpExecutor.doRequest(configureRequestOptionsFromUrl(url, {headers}), downloadResponse => {\r\n      const nativeHeaders: RequestHeaders = {\"Content-Type\": \"application/zip\"}\r\n      const streams: Array<any> = []\r\n      const downloadListenerCount = this.listenerCount(DOWNLOAD_PROGRESS)\r\n      this._logger.info(`${DOWNLOAD_PROGRESS} listener count: ${downloadListenerCount}`)\r\n      nativeResponse.writeHead(200, nativeHeaders)\r\n\r\n      // for mac only sha512 is produced (sha256 is published for windows only to preserve backward compatibility)\r\n      if (sha512 != null) {\r\n        // \"hex\" to easy migrate to new base64 encoded hash (we already produces latest-mac.yml with hex encoded hash)\r\n        streams.push(new DigestTransform(sha512, \"sha512\", sha512.length === 128 && !sha512.includes(\"+\") && !sha512.includes(\"Z\") && !sha512.includes(\"=\") ? \"hex\" : \"base64\"))\r\n      }\r\n\r\n      streams.push(nativeResponse)\r\n\r\n      let lastStream = downloadResponse\r\n      for (const stream of streams) {\r\n        stream.on(\"error\", errorHandler)\r\n        lastStream = lastStream.pipe(stream)\r\n      }\r\n    })\r\n\r\n    downloadRequest.on(\"redirect\", (statusCode: number, method: string, redirectUrl: string) => {\r\n      if (headers.authorization != null && (headers!!.authorization as string).startsWith(\"token\")) {\r\n        const parsedNewUrl = new URL(redirectUrl)\r\n        if (parsedNewUrl.hostname.endsWith(\".amazonaws.com\")) {\r\n          delete headers.authorization\r\n        }\r\n      }\r\n      this.doProxyUpdateFile(nativeResponse, redirectUrl, headers, sha512, cancellationToken, errorHandler)\r\n    })\r\n    downloadRequest.on(\"error\", errorHandler)\r\n    downloadRequest.end()\r\n  }\r\n\r\n  quitAndInstall(): void {\r\n    this.nativeUpdater.quitAndInstall()\r\n  }\r\n}"],"sourceRoot":""}