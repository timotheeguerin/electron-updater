{"version":3,"sources":["../src/AppUpdater.ts"],"names":[],"mappings":"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","sourcesContent":["import { AllPublishOptions, asArray, CancellationToken, newError, PublishConfiguration, UpdateInfo, UUID, DownloadOptions, CancellationError } from \"builder-util-runtime\"\r\nimport { randomBytes } from \"crypto\"\r\nimport { Notification } from \"electron\"\r\nimport isDev from \"electron-is-dev\"\r\nimport { EventEmitter } from \"events\"\r\nimport { ensureDir, outputFile, readFile, rename, unlink } from \"fs-extra-p\"\r\nimport { OutgoingHttpHeaders } from \"http\"\r\nimport { safeLoad } from \"js-yaml\"\r\nimport { Lazy } from \"lazy-val\"\r\nimport * as path from \"path\"\r\nimport { eq as isVersionsEqual, gt as isVersionGreaterThan, parse as parseVersion, prerelease as getVersionPreleaseComponents, SemVer } from \"semver\"\r\nimport \"source-map-support/register\"\r\nimport { DownloadedUpdateHelper } from \"./DownloadedUpdateHelper\"\r\nimport { ElectronHttpExecutor } from \"./electronHttpExecutor\"\r\nimport { GenericProvider } from \"./providers/GenericProvider\"\r\nimport { DOWNLOAD_PROGRESS, Logger, Provider, ResolvedUpdateFileInfo, UPDATE_DOWNLOADED, UpdateCheckResult, UpdaterSignal } from \"./main\"\r\nimport { createClient, isUrlProbablySupportMultiRangeRequests } from \"./providerFactory\"\r\n\r\nexport abstract class AppUpdater extends EventEmitter {\r\n  /**\r\n   * Whether to automatically download an update when it is found.\r\n   */\r\n  autoDownload: boolean = true\r\n\r\n  /**\r\n   * Whether to automatically install a downloaded update on app quit (if `quitAndInstall` was not called before).\r\n   *\r\n   * Applicable only on Windows and Linux.\r\n   */\r\n  autoInstallOnAppQuit: boolean = true\r\n\r\n  /**\r\n   * *GitHub provider only.* Whether to allow update to pre-release versions. Defaults to `true` if application version contains prerelease components (e.g. `0.12.1-alpha.1`, here `alpha` is a prerelease component), otherwise `false`.\r\n   *\r\n   * If `true`, downgrade will be allowed (`allowDowngrade` will be set to `true`).\r\n   */\r\n  allowPrerelease: boolean = false\r\n\r\n  /**\r\n   * *GitHub provider only.* Get all release notes (from current version to latest), not just the latest.\r\n   * @default false\r\n   */\r\n  fullChangelog: boolean = false\r\n\r\n  /**\r\n   * Whether to allow version downgrade (when a user from the beta channel wants to go back to the stable channel).\r\n   *\r\n   * Taken in account only if channel differs (pre-release version component in terms of semantic versioning).\r\n   *\r\n   * @default false\r\n   */\r\n  allowDowngrade: boolean = false\r\n\r\n  /**\r\n   * The current application version.\r\n   */\r\n  readonly currentVersion: SemVer\r\n\r\n  private _channel: string | null = null\r\n\r\n  protected readonly downloadedUpdateHelper: DownloadedUpdateHelper\r\n\r\n  /**\r\n   * Get the update channel. Not applicable for GitHub. Doesn't return `channel` from the update configuration, only if was previously set.\r\n   */\r\n  get channel(): string | null {\r\n    return this._channel\r\n  }\r\n\r\n  /**\r\n   * Set the update channel. Not applicable for GitHub. Overrides `channel` in the update configuration.\r\n   *\r\n   * `allowDowngrade` will be automatically set to `true`. If this behavior is not suitable for you, simple set `allowDowngrade` explicitly after.\r\n   */\r\n  set channel(value: string | null) {\r\n    if (this._channel != null) {\r\n      // noinspection SuspiciousTypeOfGuard\r\n      if (typeof value !== \"string\") {\r\n        throw newError(`Channel must be a string, but got: ${value}`, \"ERR_UPDATER_INVALID_CHANNEL\")\r\n      }\r\n      else if (value.length === 0) {\r\n        throw newError(`Channel must be not an empty string`, \"ERR_UPDATER_INVALID_CHANNEL\")\r\n      }\r\n    }\r\n\r\n    this._channel = value\r\n    this.allowDowngrade = true\r\n  }\r\n\r\n  /**\r\n   *  The request headers.\r\n   */\r\n  requestHeaders: OutgoingHttpHeaders | null = null\r\n\r\n  protected _logger: Logger = console\r\n\r\n  /**\r\n   * The logger. You can pass [electron-log](https://github.com/megahertz/electron-log), [winston](https://github.com/winstonjs/winston) or another logger with the following interface: `{ info(), warn(), error() }`.\r\n   * Set it to `null` if you would like to disable a logging feature.\r\n   */\r\n  get logger(): Logger | null {\r\n    return this._logger\r\n  }\r\n\r\n  set logger(value: Logger | null) {\r\n    this._logger = value == null ? new NoOpLogger() : value\r\n  }\r\n\r\n  // noinspection JSUnusedGlobalSymbols\r\n  /**\r\n   * For type safety you can use signals, e.g. `autoUpdater.signals.updateDownloaded(() => {})` instead of `autoUpdater.on('update-available', () => {})`\r\n   */\r\n  readonly signals = new UpdaterSignal(this)\r\n\r\n  private _appUpdateConfigPath: string | null = null\r\n\r\n  // noinspection JSUnusedGlobalSymbols\r\n  /**\r\n   * test only\r\n   * @private\r\n   */\r\n  set updateConfigPath(value: string | null) {\r\n    this.clientPromise = null\r\n    this._appUpdateConfigPath = value\r\n    this.configOnDisk = new Lazy<any>(() => this.loadUpdateConfig())\r\n  }\r\n\r\n  private clientPromise: Promise<Provider<any>> | null = null\r\n\r\n  protected get provider(): Promise<Provider<any>> {\r\n    return this.clientPromise!!\r\n  }\r\n\r\n  protected readonly stagingUserIdPromise = new Lazy<string>(() => this.getOrCreateStagingUserId())\r\n\r\n  // public, allow to read old config for anyone\r\n  /** @internal */\r\n  configOnDisk = new Lazy<any>(() => this.loadUpdateConfig())\r\n\r\n  private readonly untilAppReady: Promise<any>\r\n  private checkForUpdatesPromise: Promise<UpdateCheckResult> | null = null\r\n\r\n  protected readonly app: Electron.App\r\n\r\n  protected updateInfo: UpdateInfo | null = null\r\n\r\n  /** @internal */\r\n  readonly httpExecutor: ElectronHttpExecutor\r\n\r\n  protected constructor(options: AllPublishOptions | null | undefined, app?: Electron.App) {\r\n    super()\r\n\r\n    this.on(\"error\", (error: Error) => {\r\n      this._logger.error(`Error: ${error.stack || error.message}`)\r\n    })\r\n\r\n    if (app != null || (global as any).__test_app != null) {\r\n      this.app = app || (global as any).__test_app\r\n      this.untilAppReady = Promise.resolve()\r\n      this.httpExecutor = null as any\r\n    }\r\n    else {\r\n      this.app = require(\"electron\").app\r\n      this.httpExecutor = new ElectronHttpExecutor((authInfo, callback) => this.emit(\"login\", authInfo, callback))\r\n      this.untilAppReady = new Promise(resolve => {\r\n        if (this.app.isReady()) {\r\n          resolve()\r\n        }\r\n        else {\r\n          this.app.on(\"ready\", resolve)\r\n        }\r\n      })\r\n    }\r\n\r\n    this.downloadedUpdateHelper = new DownloadedUpdateHelper(path.join(this.app.getPath(\"userData\"), \"__update__\"))\r\n\r\n    const currentVersionString = this.app.getVersion()\r\n    const currentVersion = parseVersion(currentVersionString)\r\n    if (currentVersion == null) {\r\n      throw newError(`App version is not a valid semver version: \"${currentVersionString}\"`, \"ERR_UPDATER_INVALID_VERSION\")\r\n    }\r\n    this.currentVersion = currentVersion\r\n\r\n    this.allowPrerelease = hasPrereleaseComponents(currentVersion)\r\n\r\n    if (options != null) {\r\n      this.setFeedURL(options)\r\n    }\r\n  }\r\n\r\n  //noinspection JSMethodCanBeStatic,JSUnusedGlobalSymbols\r\n  getFeedURL(): string | null | undefined {\r\n    return \"Deprecated. Do not use it.\"\r\n  }\r\n\r\n  /**\r\n   * Configure update provider. If value is `string`, [GenericServerOptions](/configuration/publish.md#genericserveroptions) will be set with value as `url`.\r\n   * @param options If you want to override configuration in the `app-update.yml`.\r\n   */\r\n  setFeedURL(options: PublishConfiguration | AllPublishOptions | string) {\r\n    // https://github.com/electron-userland/electron-builder/issues/1105\r\n    let provider: Provider<any>\r\n    if (typeof options === \"string\") {\r\n      provider = new GenericProvider({provider: \"generic\", url: options}, this, isUrlProbablySupportMultiRangeRequests(options))\r\n    }\r\n    else {\r\n      provider = createClient(options, this)\r\n    }\r\n    this.clientPromise = Promise.resolve(provider)\r\n  }\r\n\r\n  /**\r\n   * Asks the server whether there is an update.\r\n   */\r\n  checkForUpdates(): Promise<UpdateCheckResult> {\r\n    let checkForUpdatesPromise = this.checkForUpdatesPromise\r\n    if (checkForUpdatesPromise != null) {\r\n      return checkForUpdatesPromise\r\n    }\r\n\r\n    checkForUpdatesPromise = this._checkForUpdates()\r\n    this.checkForUpdatesPromise = checkForUpdatesPromise\r\n    const nullizePromise = () => this.checkForUpdatesPromise = null\r\n    checkForUpdatesPromise\r\n      .then(nullizePromise)\r\n      .catch(nullizePromise)\r\n    return checkForUpdatesPromise\r\n  }\r\n\r\n  checkForUpdatesAndNotify(): Promise<UpdateCheckResult | null> {\r\n    if (isDev) {\r\n      return Promise.resolve(null)\r\n    }\r\n\r\n    const checkForUpdatesPromise = this.checkForUpdates()\r\n    checkForUpdatesPromise\r\n      .then(it => {\r\n        const downloadPromise = it.downloadPromise\r\n        if (downloadPromise == null) {\r\n          const debug = this._logger.debug\r\n          if (debug != null) {\r\n            debug(\"checkForUpdatesAndNotify called, downloadPromise is null\")\r\n          }\r\n          return\r\n        }\r\n\r\n        downloadPromise\r\n          .then(() => {\r\n            new Notification({\r\n              title: \"A new update is ready to install\",\r\n              body: `${this.app.getName()} version ${it.updateInfo.version} is downloaded and will be automatically installed on exit`\r\n            }).show()\r\n          })\r\n      })\r\n\r\n    return checkForUpdatesPromise\r\n  }\r\n\r\n  private async isStagingMatch(updateInfo: UpdateInfo): Promise<boolean> {\r\n    const rawStagingPercentage = updateInfo.stagingPercentage\r\n    let stagingPercentage = rawStagingPercentage\r\n    if (stagingPercentage == null) {\r\n      return true\r\n    }\r\n\r\n    stagingPercentage = parseInt(stagingPercentage as any, 10)\r\n    if (isNaN(stagingPercentage)) {\r\n      this._logger.warn(`Staging percentage is NaN: ${rawStagingPercentage}`)\r\n      return true\r\n    }\r\n\r\n    // convert from user 0-100 to internal 0-1\r\n    stagingPercentage = stagingPercentage / 100\r\n\r\n    const stagingUserId = await this.stagingUserIdPromise.value\r\n    const val = UUID.parse(stagingUserId).readUInt32BE(12)\r\n    const percentage = (val / 0xFFFFFFFF)\r\n    this._logger.info(`Staging percentage: ${stagingPercentage}, percentage: ${percentage}, user id: ${stagingUserId}`)\r\n    return percentage < stagingPercentage\r\n  }\r\n\r\n  private async _checkForUpdates(): Promise<UpdateCheckResult> {\r\n    try {\r\n      await this.untilAppReady\r\n      this._logger.info(\"Checking for update\")\r\n      this.emit(\"checking-for-update\")\r\n      return await this.doCheckForUpdates()\r\n    }\r\n    catch (e) {\r\n      this.emit(\"error\", e, `Cannot check for updates: ${(e.stack || e).toString()}`)\r\n      throw e\r\n    }\r\n  }\r\n\r\n  private computeFinalHeaders(headers: OutgoingHttpHeaders) {\r\n    if (this.requestHeaders != null) {\r\n      Object.assign(headers, this.requestHeaders)\r\n    }\r\n    return headers\r\n  }\r\n\r\n  private async isUpdateAvailable(updateInfo: UpdateInfo): Promise<boolean> {\r\n    const latestVersion = parseVersion(updateInfo.version)\r\n    if (latestVersion == null) {\r\n      throw newError(`This file could not be downloaded, or the latest version (from update server) does not have a valid semver version: \"${latestVersion}\"`, \"ERR_UPDATER_INVALID_VERSION\")\r\n    }\r\n\r\n    const currentVersion = this.currentVersion\r\n    if (isVersionsEqual(latestVersion, currentVersion)) {\r\n      return false\r\n    }\r\n\r\n    const isStagingMatch = await this.isStagingMatch(updateInfo)\r\n    if (!isStagingMatch) {\r\n      return false\r\n    }\r\n\r\n    // https://github.com/electron-userland/electron-builder/pull/3111#issuecomment-405033227\r\n    // https://github.com/electron-userland/electron-builder/pull/3111#issuecomment-405030797\r\n    const isLatestVersionNewer = isVersionGreaterThan(latestVersion, currentVersion)\r\n    if (!this.allowDowngrade) {\r\n      return isLatestVersionNewer\r\n    }\r\n\r\n    const currentVersionPrereleaseComponent = getVersionPreleaseComponents(currentVersion)\r\n    const latestVersionPrereleaseComponent = getVersionPreleaseComponents(latestVersion)\r\n    if (currentVersionPrereleaseComponent === latestVersionPrereleaseComponent) {\r\n      // allowDowngrade taken in account only if channel differs\r\n      return isLatestVersionNewer\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  protected async getUpdateInfo(): Promise<UpdateInfo> {\r\n    await this.untilAppReady\r\n\r\n    if (this.clientPromise == null) {\r\n      this.clientPromise = this.configOnDisk.value.then(it => createClient(it, this))\r\n    }\r\n\r\n    const client = await this.clientPromise\r\n    const stagingUserId = await this.stagingUserIdPromise.value\r\n    client.setRequestHeaders(this.computeFinalHeaders({\"x-user-staging-id\": stagingUserId}))\r\n    return await client.getLatestVersion()\r\n  }\r\n\r\n  private async doCheckForUpdates(): Promise<UpdateCheckResult> {\r\n    const updateInfo = await this.getUpdateInfo()\r\n    if (!await this.isUpdateAvailable(updateInfo)) {\r\n      this._logger.info(`Update for version ${this.currentVersion} is not available (latest version: ${updateInfo.version}, downgrade is ${this.allowDowngrade ? \"allowed\" : \"disallowed\"}).`)\r\n      this.emit(\"update-not-available\", updateInfo)\r\n      return {\r\n        versionInfo: updateInfo,\r\n        updateInfo,\r\n      }\r\n    }\r\n\r\n    this.updateInfo = updateInfo\r\n\r\n    this.onUpdateAvailable(updateInfo)\r\n\r\n    const cancellationToken = new CancellationToken()\r\n    //noinspection ES6MissingAwait\r\n    return {\r\n      versionInfo: updateInfo,\r\n      updateInfo,\r\n      cancellationToken,\r\n      downloadPromise: this.autoDownload ? this.downloadUpdate(cancellationToken) : null\r\n    }\r\n  }\r\n\r\n  protected onUpdateAvailable(updateInfo: UpdateInfo) {\r\n    this._logger.info(`Found version ${updateInfo.version} (url: ${asArray(updateInfo.files).map(it => it.url).join(\", \")})`)\r\n    this.emit(\"update-available\", updateInfo)\r\n  }\r\n\r\n  /**\r\n   * Start downloading update manually. You can use this method if `autoDownload` option is set to `false`.\r\n   * @returns {Promise<string>} Path to downloaded file.\r\n   */\r\n  async downloadUpdate(cancellationToken: CancellationToken = new CancellationToken()): Promise<any> {\r\n    const updateInfo = this.updateInfo\r\n    if (updateInfo == null) {\r\n      const error = new Error(\"Please check update first\")\r\n      this.dispatchError(error)\r\n      throw error\r\n    }\r\n\r\n    this._logger.info(`Downloading update from ${asArray(updateInfo.files).map(it => it.url).join(\", \")}`)\r\n\r\n    try {\r\n      return await this.doDownloadUpdate({\r\n        updateInfo,\r\n        requestHeaders: await this.computeRequestHeaders(),\r\n        cancellationToken,\r\n      })\r\n    }\r\n    catch (e) {\r\n      this.dispatchError(e)\r\n      throw e\r\n    }\r\n  }\r\n\r\n  protected dispatchError(e: Error) {\r\n    this.emit(\"error\", e, (e.stack || e).toString())\r\n  }\r\n\r\n  protected async abstract doDownloadUpdate(downloadUpdateOptions: DownloadUpdateOptions): Promise<Array<string>>\r\n\r\n  /**\r\n   * Restarts the app and installs the update after it has been downloaded.\r\n   * It should only be called after `update-downloaded` has been emitted.\r\n   *\r\n   * **Note:** `autoUpdater.quitAndInstall()` will close all application windows first and only emit `before-quit` event on `app` after that.\r\n   * This is different from the normal quit event sequence.\r\n   *\r\n   * @param isSilent *windows-only* Runs the installer in silent mode. Defaults to `false`.\r\n   * @param isForceRunAfter Run the app after finish even on silent install. Not applicable for macOS. Ignored if `isSilent` is set to `false`.\r\n   */\r\n  abstract quitAndInstall(isSilent?: boolean, isForceRunAfter?: boolean): void\r\n\r\n  private async loadUpdateConfig() {\r\n    if (this._appUpdateConfigPath == null) {\r\n      this._appUpdateConfigPath = isDev ? path.join(this.app.getAppPath(), \"dev-app-update.yml\") : path.join(process.resourcesPath!, \"app-update.yml\")\r\n    }\r\n    return safeLoad(await readFile(this._appUpdateConfigPath, \"utf-8\"))\r\n  }\r\n\r\n  private async computeRequestHeaders(): Promise<OutgoingHttpHeaders> {\r\n    const fileExtraDownloadHeaders = (await this.provider).fileExtraDownloadHeaders\r\n    if (fileExtraDownloadHeaders != null) {\r\n      const requestHeaders = this.requestHeaders\r\n      return requestHeaders == null ? fileExtraDownloadHeaders : {\r\n        ...fileExtraDownloadHeaders,\r\n        ...requestHeaders,\r\n      }\r\n    }\r\n    return this.computeFinalHeaders({accept: \"*/*\"})\r\n  }\r\n\r\n  private async getOrCreateStagingUserId(): Promise<string> {\r\n    const file = path.join(this.app.getPath(\"userData\"), \".updaterId\")\r\n    try {\r\n      const id = await readFile(file, \"utf-8\")\r\n      if (UUID.check(id)) {\r\n        return id\r\n      }\r\n      else {\r\n        this._logger.warn(`Staging user id file exists, but content was invalid: ${id}`)\r\n      }\r\n    }\r\n    catch (e) {\r\n      if (e.code !== \"ENOENT\") {\r\n        this._logger.warn(`Couldn't read staging user ID, creating a blank one: ${e}`)\r\n      }\r\n    }\r\n\r\n    const id = UUID.v5(randomBytes(4096), UUID.OID)\r\n    this._logger.info(`Generated new staging user ID: ${id}`)\r\n    try {\r\n      await outputFile(file, id)\r\n    }\r\n    catch (e) {\r\n      this._logger.warn(`Couldn't write out staging user ID: ${e}`)\r\n    }\r\n    return id\r\n  }\r\n\r\n  /** @internal */\r\n  get isAddNoCacheQuery(): boolean {\r\n    const headers = this.requestHeaders\r\n    // https://github.com/electron-userland/electron-builder/issues/3021\r\n    if (headers == null) {\r\n      return true\r\n    }\r\n\r\n    for (const headerName of Object.keys(headers)) {\r\n      const s = headerName.toLowerCase()\r\n      if (s === \"authorization\" || s === \"private-token\") {\r\n        return false\r\n      }\r\n    }\r\n    return true\r\n  }\r\n\r\n  protected async executeDownload(taskOptions: DownloadExecutorTask): Promise<Array<string>> {\r\n    const fileInfo = taskOptions.fileInfo\r\n    const downloadOptions: DownloadOptions = {\r\n      skipDirCreation: true,\r\n      headers: taskOptions.downloadUpdateOptions.requestHeaders,\r\n      cancellationToken: taskOptions.downloadUpdateOptions.cancellationToken,\r\n      sha2: (fileInfo.info as any).sha2,\r\n      sha512: fileInfo.info.sha512,\r\n    }\r\n\r\n    if (this.listenerCount(DOWNLOAD_PROGRESS) > 0) {\r\n      downloadOptions.onProgress = it => this.emit(DOWNLOAD_PROGRESS, it)\r\n    }\r\n\r\n    const updateInfo = taskOptions.downloadUpdateOptions.updateInfo\r\n    const version = updateInfo.version\r\n    const packageInfo = fileInfo.packageInfo\r\n\r\n    function getCacheUpdateFileName(): string {\r\n      // bloody NodeJS URL doesn't decode automatically\r\n      const urlPath = decodeURIComponent(taskOptions.fileInfo.url.pathname)\r\n      if (urlPath.endsWith(`.${taskOptions.fileExtension}`)) {\r\n        return path.posix.basename(urlPath)\r\n      }\r\n      else {\r\n        // url like /latest, generate name\r\n        return `update.${taskOptions.fileExtension}`\r\n      }\r\n    }\r\n\r\n    const cacheDir = this.downloadedUpdateHelper.cacheDir\r\n    await ensureDir(cacheDir)\r\n    const updateFileName = getCacheUpdateFileName()\r\n    let updateFile = path.join(cacheDir, updateFileName)\r\n    const packageFile = packageInfo == null ? null : path.join(cacheDir, `package-${version}${path.extname(packageInfo.path) || \".7z\"}`)\r\n\r\n    const done = async (isSaveCache: boolean) => {\r\n      this.downloadedUpdateHelper.setDownloadedFile(updateFile, packageFile, updateInfo, fileInfo)\r\n      if (isSaveCache) {\r\n        await this.downloadedUpdateHelper.cacheUpdateInfo(updateFileName)\r\n      }\r\n\r\n      this.emit(UPDATE_DOWNLOADED, updateInfo)\r\n      await taskOptions.done!!(updateFile)\r\n      return packageFile == null ? [updateFile] : [updateFile, packageFile]\r\n    }\r\n\r\n    const log = this._logger\r\n    const cachedUpdateFile = await this.downloadedUpdateHelper.validateDownloadedPath(updateFile, updateInfo, fileInfo, log)\r\n    if (cachedUpdateFile != null) {\r\n      updateFile = cachedUpdateFile\r\n      return await done(false)\r\n    }\r\n\r\n    const removeFileIfAny = async () => {\r\n      await this.downloadedUpdateHelper.clear()\r\n        .catch(() => {\r\n          // ignore\r\n        })\r\n      return await unlink(updateFile)\r\n        .catch(() => {\r\n          // ignore\r\n        })\r\n    }\r\n\r\n    // https://github.com/electron-userland/electron-builder/pull/2474#issuecomment-366481912\r\n    let nameCounter = 0\r\n    let tempUpdateFile = path.join(cacheDir, `temp-${updateFileName}`)\r\n    for (let i = 0; i < 3; i++) {\r\n      try {\r\n        await unlink(tempUpdateFile)\r\n      }\r\n      catch (e) {\r\n        if (e.code === \"ENOENT\") {\r\n          break\r\n        }\r\n\r\n        log.warn(`Error on remove temp update file: ${e}`)\r\n        tempUpdateFile = path.join(cacheDir, `temp-${nameCounter++}-${updateFileName}`)\r\n      }\r\n    }\r\n\r\n    try {\r\n      await taskOptions.task(tempUpdateFile, downloadOptions, packageFile, removeFileIfAny)\r\n      await rename(tempUpdateFile, updateFile)\r\n    }\r\n    catch (e) {\r\n      await removeFileIfAny()\r\n\r\n      if (e instanceof CancellationError) {\r\n        log.info(\"Cancelled\")\r\n        this.emit(\"update-cancelled\", updateInfo)\r\n      }\r\n      throw e\r\n    }\r\n\r\n    log.info(`New version ${version} has been downloaded to ${updateFile}`)\r\n    return await done(true)\r\n  }\r\n}\r\n\r\nexport interface DownloadUpdateOptions {\r\n  readonly updateInfo: UpdateInfo\r\n  readonly requestHeaders: OutgoingHttpHeaders\r\n  readonly cancellationToken: CancellationToken\r\n}\r\n\r\nfunction hasPrereleaseComponents(version: SemVer) {\r\n  const versionPrereleaseComponent = getVersionPreleaseComponents(version)\r\n  return versionPrereleaseComponent != null && versionPrereleaseComponent.length > 0\r\n}\r\n\r\n/** @private */\r\nexport class NoOpLogger implements Logger {\r\n  info(message?: any) {\r\n    // ignore\r\n  }\r\n\r\n  warn(message?: any) {\r\n    // ignore\r\n  }\r\n\r\n  error(message?: any) {\r\n    // ignore\r\n  }\r\n}\r\n\r\nexport interface DownloadExecutorTask {\r\n  readonly fileExtension: string\r\n  readonly fileInfo: ResolvedUpdateFileInfo\r\n  readonly downloadUpdateOptions: DownloadUpdateOptions\r\n  readonly task: (destinationFile: string, downloadOptions: DownloadOptions, packageFile: string | null, removeTempDirIfAny: () => Promise<any>) => Promise<any>\r\n\r\n  readonly done?: (destinationFile: string) => Promise<any>\r\n}"],"sourceRoot":""}
