{"version":3,"sources":["../../src/providers/Provider.ts"],"names":[],"mappings":"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","sourcesContent":["import { CancellationToken, HttpExecutor, newError, safeStringifyJson, UpdateFileInfo, UpdateInfo, WindowsUpdateInfo } from \"builder-util-runtime\"\r\nimport { OutgoingHttpHeaders, RequestOptions } from \"http\"\r\nimport { safeLoad } from \"js-yaml\"\r\nimport { URL } from \"url\"\r\nimport { newUrlFromBase, ResolvedUpdateFileInfo } from \"../main\"\r\n\r\nexport abstract class Provider<T extends UpdateInfo> {\r\n  private requestHeaders: OutgoingHttpHeaders | null = null\r\n\r\n  protected constructor(protected readonly executor: HttpExecutor<any>, readonly useMultipleRangeRequest = true) {\r\n  }\r\n\r\n  get fileExtraDownloadHeaders(): OutgoingHttpHeaders | null {\r\n    return null\r\n  }\r\n\r\n  setRequestHeaders(value: OutgoingHttpHeaders | null): void {\r\n    this.requestHeaders = value\r\n  }\r\n\r\n  abstract getLatestVersion(): Promise<T>\r\n\r\n  abstract resolveFiles(updateInfo: UpdateInfo): Array<ResolvedUpdateFileInfo>\r\n\r\n  /**\r\n   * Method to perform API request only to resolve update info, but not to download update.\r\n   */\r\n  protected httpRequest(url: URL, headers?: OutgoingHttpHeaders | null, cancellationToken?: CancellationToken) {\r\n    return this.executor.request(this.createRequestOptions(url, headers), cancellationToken)\r\n  }\r\n\r\n  protected createRequestOptions(url: URL, headers?: OutgoingHttpHeaders | null): RequestOptions {\r\n    const result: RequestOptions = {}\r\n    if (this.requestHeaders == null) {\r\n      if (headers != null) {\r\n        result.headers = headers\r\n      }\r\n    }\r\n    else {\r\n      result.headers = headers == null ? this.requestHeaders : {...this.requestHeaders, ...headers}\r\n    }\r\n\r\n    configureRequestOptionsFromUrl(url, result)\r\n    return result\r\n  }\r\n}\r\n\r\nexport function configureRequestOptionsFromUrl(url: URL, result: RequestOptions): RequestOptions {\r\n  result.protocol = url.protocol\r\n  result.hostname = url.hostname\r\n  if (url.port) {\r\n    result.port = url.port\r\n  }\r\n  result.path = url.pathname + url.search\r\n  return result\r\n}\r\n\r\nexport function findFile(files: Array<ResolvedUpdateFileInfo>, extension: string, not?: Array<string>): ResolvedUpdateFileInfo | null | undefined  {\r\n  if (files.length === 0) {\r\n    throw newError(\"No files provided\", \"ERR_UPDATER_NO_FILES_PROVIDED\")\r\n  }\r\n\r\n  const result = files.find(it => it.url.pathname.toLowerCase().endsWith(`.${extension}`))\r\n  if (result != null) {\r\n    return result\r\n  }\r\n  else if (not == null) {\r\n    return files[0]\r\n  }\r\n  else {\r\n    return files.find(fileInfo => !not.some(ext => fileInfo.url.pathname.toLowerCase().endsWith(`.${ext}`)))\r\n  }\r\n}\r\n\r\nexport function parseUpdateInfo(rawData: string | null, channelFile: string, channelFileUrl: URL): UpdateInfo {\r\n  if (rawData == null) {\r\n    throw newError(`Cannot parse update info from ${channelFile} in the latest release artifacts (${channelFileUrl}): rawData: null`, \"ERR_UPDATER_INVALID_UPDATE_INFO\")\r\n  }\r\n\r\n  let result: UpdateInfo\r\n  try {\r\n    result = safeLoad(rawData) as UpdateInfo\r\n  }\r\n  catch (e) {\r\n    throw newError(`Cannot parse update info from ${channelFile} in the latest release artifacts (${channelFileUrl}): ${e.stack || e.message}, rawData: ${rawData}`, \"ERR_UPDATER_INVALID_UPDATE_INFO\")\r\n  }\r\n  return result\r\n}\r\n\r\nexport function getFileList(updateInfo: UpdateInfo): Array<UpdateFileInfo> {\r\n  const files = updateInfo.files\r\n  if (files != null && files.length > 0) {\r\n    return files\r\n  }\r\n\r\n  if (updateInfo.path != null) {\r\n    return [\r\n      {\r\n        url: updateInfo.path,\r\n        sha2: (updateInfo as any).sha2,\r\n        sha512: updateInfo.sha512,\r\n      } as any,\r\n    ]\r\n  }\r\n  else {\r\n    throw newError(`No files provided: ${safeStringifyJson(updateInfo)}`, \"ERR_UPDATER_NO_FILES_PROVIDED\")\r\n  }\r\n}\r\n\r\nexport function resolveFiles(updateInfo: UpdateInfo, baseUrl: URL, pathTransformer: (p: string) => string = p => p): Array<ResolvedUpdateFileInfo> {\r\n  const files = getFileList(updateInfo)\r\n  const result: Array<ResolvedUpdateFileInfo> = files.map(fileInfo => {\r\n    if ((fileInfo as any).sha2 == null && fileInfo.sha512 == null) {\r\n      throw newError(`Update info doesn't contain nor sha256 neither sha512 checksum: ${safeStringifyJson(fileInfo)}`, \"ERR_UPDATER_NO_CHECKSUM\")\r\n    }\r\n    return {\r\n      url: newUrlFromBase(pathTransformer(fileInfo.url), baseUrl),\r\n      info: fileInfo,\r\n    }\r\n  })\r\n\r\n  const packages = (updateInfo as WindowsUpdateInfo).packages\r\n  const packageInfo = packages == null ? null : (packages[process.arch] || packages.ia32)\r\n  if (packageInfo != null) {\r\n    (result[0] as any).packageInfo = {\r\n      ...packageInfo,\r\n      path: newUrlFromBase(pathTransformer(packageInfo.path), baseUrl).href,\r\n    }\r\n  }\r\n  return result\r\n}"],"sourceRoot":""}