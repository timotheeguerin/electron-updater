{"version":3,"sources":["../../src/providers/BintrayProvider.ts"],"names":[],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEM,MAAO,eAAP,SAA+B,gBAA/B,CAAmD;AAIvD,EAAA,WAAA,CAAY,aAAZ,EAA2C,YAA3C,EAA0E;AACxE,UAAM,YAAN;AAEA,SAAK,MAAL,GAAc,KAAI,wBAAJ,EAAkB,aAAlB,EAAiC,YAAjC,EAA+C,KAAI,uCAAJ,GAA/C,CAAd;AACA,SAAK,OAAL,GAAe,wBAAW,0BAA0B,KAAK,MAAL,CAAY,KAAK,IAAI,KAAK,MAAL,CAAY,IAAI,EAA1E,CAAf;AACD;;AAED,EAAA,iBAAiB,CAAC,KAAD,EAAW;AAC1B,UAAM,iBAAN,CAAwB,KAAxB;AACA,SAAK,MAAL,CAAY,iBAAZ,CAA8B,KAA9B;AACD;;AAED,QAAM,gBAAN,GAAsB;AACpB,QAAI;AACF,YAAM,IAAI,GAAG,MAAM,KAAK,MAAL,CAAY,UAAZ,CAAuB,SAAvB,CAAnB;AACA,YAAM,eAAe,GAAG,gCAAmB,oCAAnB,CAAxB;AACA,YAAM,KAAK,GAAG,MAAM,KAAK,MAAL,CAAY,eAAZ,CAA4B,IAAI,CAAC,IAAjC,CAApB;AACA,YAAM,WAAW,GAAG,KAAK,CAAC,IAAN,CAAW,EAAE,IAAI,EAAE,CAAC,IAAH,CAAQ,QAAR,CAAiB,IAAI,eAAe,EAApC,KAA2C,EAAE,CAAC,IAAH,CAAQ,QAAR,CAAiB,IAAI,eAAe,EAApC,CAA5D,CAApB;;AACA,UAAI,WAAW,IAAI,IAAnB,EAAyB;AACvB;AACA,cAAM,oCAAS,6BAA6B,eAAe,uBAAuB,KAAK,CAAC,GAAN,CAAU,EAAE,IAAI,IAAI,CAAC,SAAL,CAAe,EAAf,EAAmB,IAAnB,EAAyB,CAAzB,CAAhB,EAA6C,IAA7C,CAAkD,KAAlD,CAAwD,EAApI,EAAwI,oCAAxI,CAAN;AACD;;AAED,YAAM,cAAc,GAAG,KAAI,UAAJ,EAAQ,0BAA0B,KAAK,MAAL,CAAY,KAAK,IAAI,KAAK,MAAL,CAAY,IAAI,IAAI,WAAW,CAAC,IAAI,EAA3F,CAAvB;AACA,aAAO,kCAAgB,MAAM,KAAK,WAAL,CAAiB,cAAjB,CAAtB,GAAwD,eAAxD,EAAyE,cAAzE,CAAP;AACD,KAZD,CAaA,OAAO,CAAP,EAAU;AACR,UAAI,gBAAgB,CAAhB,IAAqB,CAAC,CAAC,UAAF,KAAiB,GAA1C,EAA+C;AAC7C,cAAM,oCAAS,kIAAkI,CAAC,CAAC,KAAF,IAAW,CAAC,CAAC,OAAO,EAA/J,EAAmK,sCAAnK,CAAN;AACD;;AACD,YAAM,CAAN;AACD;AACF;;AAED,EAAA,YAAY,CAAC,UAAD,EAAuB;AACjC,WAAO,8BAAa,UAAb,EAAyB,KAAK,OAA9B,CAAP;AACD;;AAxCsD,C","sourcesContent":["import { BintrayOptions, CancellationToken, HttpExecutor, newError, UpdateInfo } from \"builder-util-runtime\"\r\nimport { BintrayClient } from \"builder-util-runtime/out/bintray\"\r\nimport { URL } from \"url\"\r\nimport { getChannelFilename, getDefaultChannelName, newBaseUrl, Provider, ResolvedUpdateFileInfo } from \"../main\"\r\nimport { parseUpdateInfo, resolveFiles } from \"./Provider\"\r\n\r\nexport class BintrayProvider extends Provider<UpdateInfo> {\r\n  private client: BintrayClient\r\n  private readonly baseUrl: URL\r\n\r\n  constructor(configuration: BintrayOptions, httpExecutor: HttpExecutor<any>) {\r\n    super(httpExecutor)\r\n\r\n    this.client = new BintrayClient(configuration, httpExecutor, new CancellationToken())\r\n    this.baseUrl = newBaseUrl(`https://dl.bintray.com/${this.client.owner}/${this.client.repo}`)\r\n  }\r\n\r\n  setRequestHeaders(value: any): void {\r\n    super.setRequestHeaders(value)\r\n    this.client.setRequestHeaders(value)\r\n  }\r\n\r\n  async getLatestVersion(): Promise<UpdateInfo> {\r\n    try {\r\n      const data = await this.client.getVersion(\"_latest\")\r\n      const channelFilename = getChannelFilename(getDefaultChannelName())\r\n      const files = await this.client.getVersionFiles(data.name)\r\n      const channelFile = files.find(it => it.name.endsWith(`_${channelFilename}`) || it.name.endsWith(`-${channelFilename}`))\r\n      if (channelFile == null) {\r\n        // noinspection ExceptionCaughtLocallyJS\r\n        throw newError(`Cannot find channel file \"${channelFilename}\", existing files:\\n${files.map(it => JSON.stringify(it, null, 2)).join(\",\\n\")}`, \"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND\")\r\n      }\r\n\r\n      const channelFileUrl = new URL(`https://dl.bintray.com/${this.client.owner}/${this.client.repo}/${channelFile.name}`)\r\n      return parseUpdateInfo(await this.httpRequest(channelFileUrl), channelFilename, channelFileUrl)\r\n    }\r\n    catch (e) {\r\n      if (\"statusCode\" in e && e.statusCode === 404) {\r\n        throw newError(`No latest version, please ensure that user, package and repository correctly configured. Or at least one version is published. ${e.stack || e.message}`, \"ERR_UPDATER_LATEST_VERSION_NOT_FOUND\")\r\n      }\r\n      throw e\r\n    }\r\n  }\r\n\r\n  resolveFiles(updateInfo: UpdateInfo): Array<ResolvedUpdateFileInfo> {\r\n    return resolveFiles(updateInfo, this.baseUrl)\r\n  }\r\n}"],"sourceRoot":""}
