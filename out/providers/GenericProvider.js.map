{"version":3,"sources":["../../src/providers/GenericProvider.ts"],"names":[],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEM,MAAO,eAAP,SAA+B,gBAA/B,CAAmD;AAGvD,EAAA,WAAA,CAA6B,aAA7B,EAAmF,OAAnF,EAAwG,uBAAuB,GAAG,IAAlI,EAAsI;AACpI,UAAM,OAAO,CAAC,YAAd,EAA4B,uBAA5B;AAD2B,SAAA,aAAA,GAAA,aAAA;AAAsD,SAAA,OAAA,GAAA,OAAA;AAFlE,SAAA,OAAA,GAAU,wBAAW,KAAK,aAAL,CAAmB,GAA9B,CAAV;AAIhB;;AAED,MAAY,OAAZ,GAAmB;AACjB,UAAM,MAAM,GAAG,KAAK,OAAL,CAAa,OAAb,IAAwB,KAAK,aAAL,CAAmB,OAA1D;AACA,WAAO,MAAM,IAAI,IAAV,GAAiB,oCAAjB,GAA2C,kCAAqB,MAArB,CAAlD;AACD;;AAED,QAAM,gBAAN,GAAsB;AACpB,QAAI,MAAJ;AACA,UAAM,WAAW,GAAG,gCAAmB,KAAK,OAAxB,CAApB;AACA,UAAM,UAAU,GAAG,4BAAe,WAAf,EAA4B,KAAK,OAAjC,EAA0C,KAAK,OAAL,CAAa,iBAAvD,CAAnB;;AACA,SAAK,IAAI,aAAa,GAAG,CAAzB,GAA8B,aAAa,EAA3C,EAA+C;AAC7C,UAAI;AACF,QAAA,MAAM,GAAG,kCAAgB,MAAM,KAAK,WAAL,CAAiB,UAAjB,CAAtB,GAAoD,WAApD,EAAiE,UAAjE,CAAT;AACA;AACD,OAHD,CAIA,OAAO,CAAP,EAAU;AACR,YAAI,CAAC,YAAY,+BAAb,IAA0B,CAAC,CAAC,UAAF,KAAiB,GAA/C,EAAoD;AAClD,gBAAM,oCAAS,wBAAwB,WAAW,kBAAkB,CAAC,CAAC,KAAF,IAAW,CAAC,CAAC,OAAO,EAAlF,EAAsF,oCAAtF,CAAN;AACD,SAFD,MAGK,IAAI,CAAC,CAAC,IAAF,KAAW,cAAf,EAA+B;AAClC,cAAI,aAAa,GAAG,CAApB,EAAuB;AACrB,kBAAM,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAoB;AACpC,kBAAI;AACF,gBAAA,UAAU,CAAC,OAAD,EAAU,OAAO,aAAjB,CAAV;AACD,eAFD,CAGA,OAAO,CAAP,EAAU;AACR,gBAAA,MAAM,CAAC,CAAD,CAAN;AACD;AACF,aAPK,CAAN;AAQA;AACD;AACF;;AACD,cAAM,CAAN;AACD;AACF;;AAED,QAAI,kCAAJ,EAA2B;AACxB,MAAA,MAAc,CAAC,cAAf,GAAgC,UAAU,CAAC,IAA3C;AACF;;AACD,WAAO,MAAP;AACD;;AAED,EAAA,YAAY,CAAC,UAAD,EAAuB;AACjC,WAAO,8BAAa,UAAb,EAAyB,KAAK,OAA9B,CAAP;AACD;;AAlDsD,C","sourcesContent":["import { GenericServerOptions, HttpError, newError, UpdateInfo } from \"builder-util-runtime\"\r\nimport { AppUpdater } from \"../AppUpdater\"\r\nimport { getChannelFilename, getCustomChannelName, getDefaultChannelName, isUseOldMacProvider, newBaseUrl, newUrlFromBase, Provider, ResolvedUpdateFileInfo } from \"../main\"\r\nimport { parseUpdateInfo, resolveFiles } from \"./Provider\"\r\n\r\nexport class GenericProvider extends Provider<UpdateInfo> {\r\n  private readonly baseUrl = newBaseUrl(this.configuration.url)\r\n\r\n  constructor(private readonly configuration: GenericServerOptions, private readonly updater: AppUpdater, useMultipleRangeRequest = true) {\r\n    super(updater.httpExecutor, useMultipleRangeRequest)\r\n  }\r\n\r\n  private get channel(): string {\r\n    const result = this.updater.channel || this.configuration.channel\r\n    return result == null ? getDefaultChannelName() : getCustomChannelName(result)\r\n  }\r\n\r\n  async getLatestVersion(): Promise<UpdateInfo> {\r\n    let result: UpdateInfo\r\n    const channelFile = getChannelFilename(this.channel)\r\n    const channelUrl = newUrlFromBase(channelFile, this.baseUrl, this.updater.isAddNoCacheQuery)\r\n    for (let attemptNumber = 0; ; attemptNumber++) {\r\n      try {\r\n        result = parseUpdateInfo(await this.httpRequest(channelUrl), channelFile, channelUrl)\r\n        break\r\n      }\r\n      catch (e) {\r\n        if (e instanceof HttpError && e.statusCode === 404) {\r\n          throw newError(`Cannot find channel \"${channelFile}\" update info: ${e.stack || e.message}`, \"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND\")\r\n        }\r\n        else if (e.code === \"ECONNREFUSED\") {\r\n          if (attemptNumber < 3) {\r\n            await new Promise((resolve, reject) => {\r\n              try {\r\n                setTimeout(resolve, 1000 * attemptNumber)\r\n              }\r\n              catch (e) {\r\n                reject(e)\r\n              }\r\n            })\r\n            continue\r\n          }\r\n        }\r\n        throw e\r\n      }\r\n    }\r\n\r\n    if (isUseOldMacProvider()) {\r\n      (result as any).releaseJsonUrl = channelUrl.href\r\n    }\r\n    return result\r\n  }\r\n\r\n  resolveFiles(updateInfo: UpdateInfo): Array<ResolvedUpdateFileInfo> {\r\n    return resolveFiles(updateInfo, this.baseUrl)\r\n  }\r\n}"],"sourceRoot":""}
