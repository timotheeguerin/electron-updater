{"version":3,"file":"PrivateGitHubProvider.js","sourceRoot":"","sources":["../../src/providers/PrivateGitHubProvider.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAiB,SAAS,EAAgB,QAAQ,EAAc,MAAM,sBAAsB,CAAA;AAEtH,OAAO,EAAE,QAAQ,EAAE,MAAM,SAAS,CAAA;AAClC,OAAO,KAAK,IAAI,MAAM,MAAM,CAAA;AAE5B,OAAO,EAAE,GAAG,EAAE,MAAM,KAAK,CAAA;AACzB,OAAO,EAAE,kBAAkB,EAAE,MAAM,kBAAkB,CAAA;AACrD,OAAO,EAAE,kBAAkB,EAAE,qBAAqB,EAAE,cAAc,EAA0B,MAAM,SAAS,CAAA;AAC3G,OAAO,EAAE,WAAW,EAAE,MAAM,YAAY,CAAA;AAMxC,MAAM,OAAO,qBAAsB,SAAQ,kBAA2C;IACpF,YAAY,OAAsB,EAAmB,OAAmB,EAAmB,KAAa,EAAE,QAA2B;QACnI,KAAK,CAAC,OAAO,EAAE,gBAAgB,EAAE,QAAQ,CAAC,CAAA;QADS,YAAO,GAAP,OAAO,CAAY;QAAmB,UAAK,GAAL,KAAK,CAAQ;IAExG,CAAC;IAES,oBAAoB,CAAC,GAAQ,EAAE,OAAoC;QAC3E,MAAM,MAAM,GAAG,KAAK,CAAC,oBAAoB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;QACvD,MAAc,CAAC,QAAQ,GAAG,QAAQ,CAAA;QACnC,OAAO,MAAM,CAAA;IACf,CAAC;IAED,KAAK,CAAC,gBAAgB;QACpB,MAAM,iBAAiB,GAAG,IAAI,iBAAiB,EAAE,CAAA;QACjD,MAAM,WAAW,GAAG,kBAAkB,CAAC,qBAAqB,EAAE,CAAC,CAAA;QAE/D,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,CAAA;QACtE,MAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,KAAK,WAAW,CAAC,CAAA;QACpE,IAAI,KAAK,IAAI,IAAI,EAAE;YACjB,+CAA+C;YAC/C,MAAM,QAAQ,CAAC,eAAe,WAAW,mBAAmB,WAAW,CAAC,QAAQ,IAAI,WAAW,CAAC,IAAI,EAAE,EAAE,oCAAoC,CAAC,CAAA;SAC9I;QAED,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QAC9B,IAAI,MAAW,CAAA;QACf,IAAI;YACF,MAAM,GAAG,QAAQ,CAAC,CAAC,MAAM,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,IAAI,CAAC,gBAAgB,CAAC,0BAA0B,CAAC,EAAE,iBAAiB,CAAC,CAAG,CAAC,CAAA;SACzH;QACD,OAAO,CAAC,EAAE;YACR,IAAI,CAAC,YAAY,SAAS,IAAI,CAAC,CAAC,UAAU,KAAK,GAAG,EAAE;gBAClD,MAAM,QAAQ,CAAC,eAAe,WAAW,qCAAqC,GAAG,MAAM,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,oCAAoC,CAAC,CAAA;aACrJ;YACD,MAAM,CAAC,CAAA;SACR;QAEA,MAAkC,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,CAAA;QAC/D,OAAO,MAAM,CAAA;IACf,CAAC;IAED,IAAI,wBAAwB;QAC1B,OAAO,IAAI,CAAC,gBAAgB,CAAC,0BAA0B,CAAC,CAAA;IAC1D,CAAC;IAEO,gBAAgB,CAAC,MAAc;QACrC,OAAO;YACL,MAAM;YACN,aAAa,EAAE,SAAS,IAAI,CAAC,KAAK,EAAE;SACrC,CAAA;IACH,CAAC;IAEO,KAAK,CAAC,oBAAoB,CAAC,iBAAoC;QACrE,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAA;QAC5B,MAAM,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,CAAA;QAEpD,IAAI,CAAC,eAAe,EAAE;YACpB,QAAQ,GAAG,GAAG,QAAQ,SAAS,CAAA;SAChC;QAED,MAAM,GAAG,GAAG,cAAc,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,CAAA;QAClD,IAAI;YACF,IAAI,OAAO,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,IAAI,CAAC,gBAAgB,CAAC,gCAAgC,CAAC,EAAE,iBAAiB,CAAC,CAAG,CAAC,CAAC,CAAA;YACvI,IAAI,eAAe,EAAE;gBACnB,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAA;aACjD;YACD,OAAO,OAAO,CAAA;SACf;QACD,OAAO,CAAC,EAAE;YACR,MAAM,QAAQ,CAAC,4CAA4C,GAAG,iDAAiD,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,sCAAsC,CAAC,CAAA;SAC/K;IACH,CAAC;IAED,IAAY,QAAQ;QAClB,OAAO,IAAI,CAAC,qBAAqB,CAAC,UAAU,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,WAAW,CAAC,CAAA;IACjG,CAAC;IAED,YAAY,CAAC,UAAmC;QAC9C,OAAO,WAAW,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;YACtC,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAA;YAC3D,MAAM,KAAK,GAAG,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,IAAI,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,CAAC,CAAA;YAC1E,IAAI,KAAK,IAAI,IAAI,EAAE;gBACjB,MAAM,QAAQ,CAAC,sBAAsB,IAAI,SAAS,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,EAAE,6BAA6B,CAAC,CAAA;aAC/H;YAED,OAAO;gBACL,GAAG,EAAE,IAAI,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC;gBACvB,IAAI,EAAE,EAAE;aACT,CAAA;QACH,CAAC,CAAC,CAAA;IACJ,CAAC;CACF","sourcesContent":["import { CancellationToken, GithubOptions, HttpError, HttpExecutor, newError, UpdateInfo } from \"builder-util-runtime\"\r\nimport { OutgoingHttpHeaders, RequestOptions } from \"http\"\r\nimport { safeLoad } from \"js-yaml\"\r\nimport * as path from \"path\"\r\nimport { AppUpdater } from \"../AppUpdater\"\r\nimport { URL } from \"url\"\r\nimport { BaseGitHubProvider } from \"./GitHubProvider\"\r\nimport { getChannelFilename, getDefaultChannelName, newUrlFromBase, ResolvedUpdateFileInfo } from \"../main\"\r\nimport { getFileList } from \"./Provider\"\r\n\r\nexport interface PrivateGitHubUpdateInfo extends UpdateInfo {\r\n  assets: Array<Asset>\r\n}\r\n\r\nexport class PrivateGitHubProvider extends BaseGitHubProvider<PrivateGitHubUpdateInfo> {\r\n  constructor(options: GithubOptions, private readonly updater: AppUpdater, private readonly token: string, executor: HttpExecutor<any>) {\r\n    super(options, \"api.github.com\", executor)\r\n  }\r\n\r\n  protected createRequestOptions(url: URL, headers?: OutgoingHttpHeaders | null): RequestOptions {\r\n    const result = super.createRequestOptions(url, headers);\r\n    (result as any).redirect = \"manual\"\r\n    return result\r\n  }\r\n\r\n  async getLatestVersion(): Promise<PrivateGitHubUpdateInfo> {\r\n    const cancellationToken = new CancellationToken()\r\n    const channelFile = getChannelFilename(getDefaultChannelName())\r\n\r\n    const releaseInfo = await this.getLatestVersionInfo(cancellationToken)\r\n    const asset = releaseInfo.assets.find(it => it.name === channelFile)\r\n    if (asset == null) {\r\n      // html_url must be always, but just to be sure\r\n      throw newError(`Cannot find ${channelFile} in the release ${releaseInfo.html_url || releaseInfo.name}`, \"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND\")\r\n    }\r\n\r\n    const url = new URL(asset.url)\r\n    let result: any\r\n    try {\r\n      result = safeLoad((await this.httpRequest(url, this.configureHeaders(\"application/octet-stream\"), cancellationToken))!!)\r\n    }\r\n    catch (e) {\r\n      if (e instanceof HttpError && e.statusCode === 404) {\r\n        throw newError(`Cannot find ${channelFile} in the latest release artifacts (${url}): ${e.stack || e.message}`, \"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND\")\r\n      }\r\n      throw e\r\n    }\r\n\r\n    (result as PrivateGitHubUpdateInfo).assets = releaseInfo.assets\r\n    return result\r\n  }\r\n\r\n  get fileExtraDownloadHeaders(): OutgoingHttpHeaders | null {\r\n    return this.configureHeaders(\"application/octet-stream\")\r\n  }\r\n\r\n  private configureHeaders(accept: string) {\r\n    return {\r\n      accept,\r\n      authorization: `token ${this.token}`,\r\n    }\r\n  }\r\n\r\n  private async getLatestVersionInfo(cancellationToken: CancellationToken): Promise<ReleaseInfo> {\r\n    let basePath = this.basePath\r\n    const allowPrerelease = this.updater.allowPrerelease\r\n\r\n    if (!allowPrerelease) {\r\n      basePath = `${basePath}/latest`\r\n    }\r\n\r\n    const url = newUrlFromBase(basePath, this.baseUrl)\r\n    try {\r\n      let version = (JSON.parse((await this.httpRequest(url, this.configureHeaders(\"application/vnd.github.v3+json\"), cancellationToken))!!))\r\n      if (allowPrerelease) {\r\n        version = version.find((v: any) => v.prerelease)\r\n      }\r\n      return version\r\n    }\r\n    catch (e) {\r\n      throw newError(`Unable to find latest version on GitHub (${url}), please ensure a production release exists: ${e.stack || e.message}`, \"ERR_UPDATER_LATEST_VERSION_NOT_FOUND\")\r\n    }\r\n  }\r\n\r\n  private get basePath() {\r\n    return this.computeGithubBasePath(`/repos/${this.options.owner}/${this.options.repo}/releases`)\r\n  }\r\n\r\n  resolveFiles(updateInfo: PrivateGitHubUpdateInfo): Array<ResolvedUpdateFileInfo> {\r\n    return getFileList(updateInfo).map(it => {\r\n      const name = path.posix.basename(it.url).replace(/ /g, \"-\")\r\n      const asset = updateInfo.assets.find(it => it != null && it.name === name)\r\n      if (asset == null) {\r\n        throw newError(`Cannot find asset \"${name}\" in: ${JSON.stringify(updateInfo.assets, null, 2)}`, \"ERR_UPDATER_ASSET_NOT_FOUND\")\r\n      }\r\n\r\n      return {\r\n        url: new URL(asset.url),\r\n        info: it,\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\ninterface ReleaseInfo {\r\n  name: string\r\n  html_url: string\r\n  assets: Array<Asset>\r\n}\r\n\r\nexport interface Asset {\r\n  name: string\r\n  url: string\r\n}"]}