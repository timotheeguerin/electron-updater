{"version":3,"sources":["../src/providerFactory.ts"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEM,SAAU,sCAAV,CAAiD,GAAjD,EAA4D;AAChE,SAAO,CAAC,GAAG,CAAC,QAAJ,CAAa,kBAAb,CAAR;AACD;;AAEK,SAAU,YAAV,CAAuB,IAAvB,EAAuE,OAAvE,EAA0F;AAC9F;AACA,MAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;AAC5B,UAAM,oCAAS,yCAAT,EAAoD,4CAApD,CAAN;AACD;;AAED,QAAM,YAAY,GAAG,OAAO,CAAC,YAA7B;AACA,QAAM,QAAQ,GAAG,IAAI,CAAC,QAAtB;;AACA,UAAQ,QAAR;AACE,SAAK,QAAL;AACE,YAAM,aAAa,GAAG,IAAtB;AACA,YAAM,KAAK,GAAG,CAAC,aAAa,CAAC,OAAd,GAAwB,OAAO,CAAC,GAAR,CAAY,QAAZ,IAAwB,OAAO,CAAC,GAAR,CAAY,YAA5D,GAA2E,IAA5E,KAAqF,aAAa,CAAC,KAAjH;;AACA,UAAI,KAAK,IAAI,IAAb,EAAmB;AACjB,eAAO,KAAI,gCAAJ,EAAmB,aAAnB,EAAkC,OAAlC,EAA2C,YAA3C,CAAP;AACD,OAFD,MAGK;AACH,eAAO,KAAI,8CAAJ,EAA0B,aAA1B,EAAyC,OAAzC,EAAkD,KAAlD,EAAyD,YAAzD,CAAP;AACD;;AAEH,SAAK,IAAL;AACA,SAAK,QAAL;AACE,aAAO,KAAI,kCAAJ,EAAoB;AACzB,QAAA,QAAQ,EAAE,SADe;AAEzB,QAAA,GAAG,EAAE,oDAAyB,IAAzB,CAFoB;AAGzB,QAAA,OAAO,EAAG,IAAsB,CAAC,OAAvB,IAAkC;AAHnB,OAApB,EAIJ,OAJI,EAIK,QAAQ,KAAK;AAAS;AAJ3B,OAAP;;AAMF,SAAK,SAAL;AACE,YAAM,OAAO,GAAG,IAAhB;AACA,aAAO,KAAI,kCAAJ,EAAoB,OAApB,EAA6B,OAA7B,EAAsC,OAAO,CAAC,uBAAR,KAAoC,KAApC,IAA6C,sCAAsC,CAAC,OAAO,CAAC,GAAT,CAAzH,CAAP;;AAEF,SAAK,SAAL;AACE,aAAO,KAAI,kCAAJ,EAAoB,IAApB,EAA4C,YAA5C,CAAP;;AAEF;AACE,YAAM,oCAAS,yBAAyB,QAAQ,EAA1C,EAA8C,kCAA9C,CAAN;AA3BJ;AA6BD,C","sourcesContent":["import { AllPublishOptions, BaseS3Options, BintrayOptions, GenericServerOptions, getS3LikeProviderBaseUrl, GithubOptions, newError, PublishConfiguration } from \"builder-util-runtime\"\r\nimport { AppUpdater } from \"./AppUpdater\"\r\nimport { BintrayProvider } from \"./providers/BintrayProvider\"\r\nimport { GenericProvider } from \"./providers/GenericProvider\"\r\nimport { GitHubProvider } from \"./providers/GitHubProvider\"\r\nimport { PrivateGitHubProvider } from \"./providers/PrivateGitHubProvider\"\r\n\r\nexport function isUrlProbablySupportMultiRangeRequests(url: string): boolean {\r\n  return !url.includes(\"s3.amazonaws.com\")\r\n}\r\n\r\nexport function createClient(data: PublishConfiguration | AllPublishOptions, updater: AppUpdater) {\r\n  // noinspection SuspiciousTypeOfGuard\r\n  if (typeof data === \"string\") {\r\n    throw newError(\"Please pass PublishConfiguration object\", \"ERR_UPDATER_INVALID_PROVIDER_CONFIGURATION\")\r\n  }\r\n\r\n  const httpExecutor = updater.httpExecutor\r\n  const provider = data.provider\r\n  switch (provider) {\r\n    case \"github\":\r\n      const githubOptions = data as GithubOptions\r\n      const token = (githubOptions.private ? process.env.GH_TOKEN || process.env.GITHUB_TOKEN : null) || githubOptions.token\r\n      if (token == null) {\r\n        return new GitHubProvider(githubOptions, updater, httpExecutor)\r\n      }\r\n      else {\r\n        return new PrivateGitHubProvider(githubOptions, updater, token, httpExecutor)\r\n      }\r\n\r\n    case \"s3\":\r\n    case \"spaces\":\r\n      return new GenericProvider({\r\n        provider: \"generic\",\r\n        url: getS3LikeProviderBaseUrl(data),\r\n        channel: (data as BaseS3Options).channel || null\r\n      }, updater, provider === \"spaces\" /* https://github.com/minio/minio/issues/5285#issuecomment-350428955 */)\r\n\r\n    case \"generic\":\r\n      const options = data as GenericServerOptions\r\n      return new GenericProvider(options, updater, options.useMultipleRangeRequest !== false && isUrlProbablySupportMultiRangeRequests(options.url))\r\n\r\n    case \"bintray\":\r\n      return new BintrayProvider(data as BintrayOptions, httpExecutor)\r\n\r\n    default:\r\n      throw newError(`Unsupported provider: ${provider}`, \"ERR_UPDATER_UNSUPPORTED_PROVIDER\")\r\n  }\r\n}"],"sourceRoot":""}
